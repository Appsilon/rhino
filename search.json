[{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing guidelines","title":"Contributing guidelines","text":"document contains guidelines specific Rhino. Appsilon’s general contributing guidelines still apply.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Contributing guidelines","text":"R CMD checkdevtools::check() rcmdcheck::rcmdcheck() Run linterdevtools::lint() lintr::lint_package() Run unit testsdevtools::test()testthat::test_local() Check spellingdevtools::spell_check() spelling::spell_check_package() Build documentationdevtools::build_site() pkgdown::build_site() Build packagedevtools::build() pkgbuild::build()","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"app-push-test","dir":"","previous_headings":"","what":"App Push Test","title":"Contributing guidelines","text":"Rhino comes CI setup box. rhino::init() creates rhino-test.yml file, GitHub Actions workflow automatically runs linters tests project pushed GitHub. test rhino-test.yml , app-push-test.yml workflow. initializes fresh Rhino application pushes bot/app-push-test branch. rhino-test.yml application runs results can viewed list workflow runs. App Push Test triggered automatically pushes main can also triggered manually branch via Actions tab. workflow requires fine-grained personal access token write access code workflows. saved APP_PUSH_TEST_PAT repository secret.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"website","dir":"","previous_headings":"","what":"Website","title":"Contributing guidelines","text":"documentation site built deployed automatically pkgdown.yml workflow. workflow triggered release published, pre-release changed release. also possible manually run selected tag/branch Actions tab.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"preparation","dir":"","previous_headings":"Release process","what":"Preparation","title":"Contributing guidelines","text":"Announce planned release #proj-rhino (approximate date scope). Plan promotion (social media, blog post, …). Coordinate efforts marketing team. Ensure App Push Test passes (latest run main branch green). Create task track progress. Test upgrade installing Rhino current main branch. Continue release process. upgrade can completed task closed package accepted CRAN. Create release-X.Y.Z branch main. Bump package version according SemVer. Drop development version (last component, e.g. .9001). Replace (development version) X.Y.Z header. add link GitHub releases yet - link won’t work fail CRAN checks. Edit list changes make useful understandable users. See keep changelog guidelines. Submit changes pull request titled “Release X.Y.Z”. Get approved merged.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"submitting-to-cran","dir":"","previous_headings":"Release process","what":"Submitting to CRAN","title":"Contributing guidelines","text":"Checkout main branch ensure date. Build package devtools::build(). Test package R CMD check ---cran rhino_X.Y.Z.tar.gz. errors, warnings notes. Create new vX.Y.Z-rc.1 tag main branch (rc stands release candidate). Use tag name title. Leave description blank. Check “Set pre-release”. Click “Publish release”. Use name email. Click “Choose File” select rhino_X.Y.Z.tar.gz step 1. Click “Upload package”. Click “Submit package”. Click confirmation link sent opensource@appsilon.com. CRAN reviewers ask changes, implement return step 1. Use rc.2, rc.3 subsequent submissions.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"once-accepted-to-cran","dir":"","previous_headings":"Release process","what":"Once accepted to CRAN","title":"Contributing guidelines","text":"Create new vX.Y.Z tag main branch. Use tag name title. Fill description NEWS.md. Check “Set latest release”. Click “Publish release”. Add development version .9000 DESCRIPTION. Add # rhino (development version) header NEWS.md. Link # rhino X.Y.Z header GitHub release NEWS.md. Announce release #proj-rhino.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"development-process","dir":"","previous_headings":"","what":"Development process","title":"Contributing guidelines","text":"changes introduced pull requests main branch, must always kept “potentially shippable” state. Pull requests must peer-reviewed. reviewer inspects code, tests changes checks DoD approving. follow Semantic Versioning scheme. Starting 1.0.0, versions released CRAN.","code":""},{"path":"https://appsilon.github.io/rhino/CONTRIBUTING.html","id":"definition-of-done","dir":"","previous_headings":"","what":"Definition of Done","title":"Contributing guidelines","text":"PR least 1 approval 0 change requests. CI passes (R CMD check, linter, unit tests, spelling). change thoroughly documented.","code":""},{"path":"https://appsilon.github.io/rhino/PULL_REQUEST_TEMPLATE.html","id":"changes","dir":"","previous_headings":"","what":"Changes","title":"NA","text":"Closes #","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/explanation/application-structure.html","id":"philosophy","dir":"Articles > Explanation","previous_headings":"","what":"Philosophy","title":"Explanation: Application structure","text":"Shiny comes powerful reactive programming model rich set functions creating UI widgets custom HTML structure. features make possible quickly build impressive, interactive applications, can also make harder test reuse code. address issue, recommend separating code depends Shiny logic can expressed without . experience, division crucial building robust maintainable applications. support separation, Rhino encourages specific structure R sources application: main.R: entry point application. logic: Application code independent Shiny. view: Shiny modules related code.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/application-structure.html","id":"logic","dir":"Articles > Explanation","previous_headings":"Philosophy","what":"Logic","title":"Explanation: Application structure","text":"Use logic directory code can expressed without Shiny. Every Shiny app may different end goal, generally contain isolatable sections code can expressed normal R functions. data manipulation, generating non-interactive plots graphs, connecting external data source, outside definable inputs, doesn’t interact rely Shiny way. Code relies upon reactivity UI builder/markup functions can problematic test difficult reuse. proper design understanding concept, possible express application logic using plain R functions data structures (like lists, data frames).","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/application-structure.html","id":"view","dir":"Articles > Explanation","previous_headings":"Philosophy","what":"View","title":"Explanation: Application structure","text":"view directory contain code describes user interface application relies upon reactive capabilities Shiny. use functions defined logic, core app functionality defined. familiar Shiny modules, please take time read concept. short, using modules can isolate paired Shiny UI/Server code, prevent overlap reactivity wrapping input/output value names ns() function. allows us “namespace” running module use multiple times application. important concept shortly summarize, new just remember want reference UI element server, needs namespaced. typical module structured like :","code":"box::use(   shiny[moduleServer, NS, renderText, tagList, textInput, textOutput], ) box::use(   app/logic/messages[hello_message], )  #' @export ui <- function(id) {   ns <- NS(id)   tagList(     textInput(ns(\"name\"), \"Name\"),     textOutput(ns(\"message\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$message <- renderText(hello_message(input$name))   }) }"},{"path":"https://appsilon.github.io/rhino/articles/explanation/application-structure.html","id":"minimal-app-r","dir":"Articles > Explanation","previous_headings":"","what":"Minimal app.R","title":"Explanation: Application structure","text":"Rhino application comes minimal app.R: important edit file use like global.R file, instead write top-level code app/main.R. also important note thanks shinyApp string comment, RStudio recognizes file Shiny application displays “Run” “Publish” buttons. approach gives Rhino full control startup processes application. Steps performed rhino::app() include: Purge box cache, app can reloaded without restarting R session. Configure logger (log level, log file). Configure static files. Load main module / legacy entrypoint. Add head tags (favicon, CSS & JS). fair question ask really need separate main.R file. Couldn’t just define top-level ui server app.R pass rhino::app() arguments normal shiny::shinyApp() call? reasoning behind structure enforce consistent use box modules throughout application. file loaded box::use() can load modules/packages box::use(). short, means use library() source() functions app. important distinction traditional Shiny structure, simply sourcing app.R app loaded. entire Rhino application loaded box::use(app/main), sources must properly structured box modules.","code":"# Rhino / shinyApp entrypoint. Do not edit. rhino::app()"},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"rationale","dir":"Articles > Explanation","previous_headings":"","what":"Rationale","title":"Explanation: Box modules","text":"large applications critical maintainability properly structure code using files directories. R comes library() source() functions, functionality limited comes dividing code modules expressing dependencies. address , Rhino uses box R package, allows modularize code similar way languages like Python Java: Box modules force explicit dependencies files packages. graph dependencies visible glance app developed box, traditional approach (global.R, library(), source()) makes easy build app author understands. Introduction box existing apps written without helped improve code structure find bugs.","code":"box::use(   dplyr, # Import dplyr. Its functions can be used via `$`, e.g. `dplyr$filter`.   shiny[reactive], # Import the `reactive()` function from shiny package. ) box::use(   logic/data_validation, # Import the `logic/data_validation.R` module. )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"usage","dir":"Articles > Explanation","previous_headings":"","what":"Usage","title":"Explanation: Box modules","text":"best place learn box official documentation. discussion mainly focus use box inside Rhino. Rhino suggests use app/logic app/view. Rhino creates directories default. Code independent Shiny kept app/logic code using related Shiny modules kept app/view. structure makes easy make nested hierarchy code help box. say_hello() say_bye() can exported app/logic/messages.R. Note box::use() allows explicit attaching function names module shown . Modules can also imported across directories; use code app/logic app/view. explicit attaching function names, clear code uses shiny.semantic::textInput() shiny::textInput(). main.R, Shiny modules can attached without attaching function names. Shiny module functions accessed via $.","code":"# app/logic/messages.R #' @export say_hello <- function(name) {   paste0(\"Hello, \", name, \"!\") }  #' @export say_bye <- function(name) {   paste0(\"Goodbye, \", name, \"!\") } box::use(   app/logic/messages[say_hello, say_bye], )  #' @export greet <- function(name) {   paste(     say_hello(name), say_bye(name)   ) } # app/view/greet_module.R box::use(   shiny[moduleServer, NS, renderText, div, textOutput, req],   shiny.semantic[textInput], )  box::use(   app/logic/greet[greet], )  #' @export ui <- function(id) {   ns <- NS(id)   div(     textInput(ns(\"name\"), \"Name\"),     textOutput(ns(\"message\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$message <- renderText({       req(input$name)       greet(input$name)     })   }) } # app/main.R box::use(   shiny[moduleServer, NS],   shiny.semantic[semanticPage], )  box::use(   app/view/greet_module, )  #' @export ui <- function(id) {   ns <- NS(id)   semanticPage(     greet_module$ui(ns(\"message\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     greet_module$server(\"message\")   }) }"},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"advanced-features","dir":"Articles > Explanation","previous_headings":"","what":"Advanced Features","title":"Explanation: Box modules","text":"useful box features also explained sections .","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"init-files","dir":"Articles > Explanation","previous_headings":"Advanced Features","what":"Init files","title":"Explanation: Box modules","text":"Objects exported __init__.R file can imported parent directory.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"example","dir":"Articles > Explanation","previous_headings":"Advanced Features > Init files","what":"Example","title":"Explanation: Box modules","text":"Assume app/foo/__init__.R file following content: can now import bar defined app/foo.R: mechanism can used combination reexports make easier import multiple modules single directory.","code":"#' @export bar <- \"Hello!\" box::use(   app/foo[bar], )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"reexports","dir":"Articles > Explanation","previous_headings":"Advanced Features","what":"Reexports","title":"Explanation: Box modules","text":"module can reexport objects imported different module applying #' @export box::use() statement.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"example-1","dir":"Articles > Explanation","previous_headings":"Advanced Features > Reexports","what":"Example","title":"Explanation: Box modules","text":"Assume modules analysis_tab.R download_tab.R app/view directory. can reexport app/view/__init__.R like : following box::use() statements now equivalent:","code":"#' @export box::use(   app/view/analysis_tab,   app/view/download_tab, ) box::use(   app/view/analysis_tab,   app/view/download_tab, ) box::use(   app/view[analysis_tab, download_tab], )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"style-guide","dir":"Articles > Explanation","previous_headings":"","what":"Style guide","title":"Explanation: Box modules","text":"enhance readability maintainability code, suggest following Rhino style guide.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"known-issues","dir":"Articles > Explanation","previous_headings":"","what":"Known issues","title":"Explanation: Box modules","text":"following issues fixed box v1.1.3, required Rhino starting v1.4.0. section left reference.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"lazy-loaded-data","dir":"Articles > Explanation","previous_headings":"Known issues","what":"Lazy-loaded data","title":"Explanation: Box modules","text":"Prior v1.1.3 box didn’t support lazy-loaded data, e.g. box::use(datasets[mtcars]) wouldn’t work (see issue). possible workaround using datasets::mtcars instead.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/box-modules.html","id":"trailing-commas","dir":"Articles > Explanation","previous_headings":"Known issues","what":"Trailing commas","title":"Explanation: Box modules","text":"Box allows trailing commas box::use() statements code, prior v1.1.3 cause problems circumstances: Reexports (issue). Functions accessed via $ (issue).","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/node-js-javascript-and-sass-tools.html","id":"about","dir":"Articles > Explanation","previous_headings":"","what":"About","title":"Explanation: Node.js - JavaScript and Sass tools","text":"Node.js runtime environment can execute JavaScript code outside web browser. used widely web development. package manager, npm, makes easy install virtually JavaScript library. can use package managers bun pnpm compatible npm. switch default npm usage, set global environment variable named RHINO_NPM. instance, want use bun instead npm, add export RHINO_NPM=bun shell startup file (e.g. .bashrc). Rhino uses Node.js provide state art tools working JavaScript Sass. following functions require Node.js work: build_js() build_sass() (sass: node configuration rhino.yml) lint_js() lint_sass() test_e2e()","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/node-js-javascript-and-sass-tools.html","id":"node-directory","dir":"Articles > Explanation","previous_headings":"About","what":"Node directory","title":"Explanation: Node.js - JavaScript and Sass tools","text":"hood Rhino create .rhino directory project store specific libraries needed tools. directory git-ignored default safe remove.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/node-js-javascript-and-sass-tools.html","id":"node-installation-via-nvm","dir":"Articles > Explanation","previous_headings":"About","what":"Node installation via nvm","title":"Explanation: Node.js - JavaScript and Sass tools","text":"Node can installed various ways. One relies nvm (Node Version Manager). ’s known issue using multiple versions Node installed nvm causes RStudio recognize properly chosen version. ’s caused nvm RStudio can easily mitigated starting RStudio terminal: Ubuntu/Debian Open terminal choice (.e. Bash) run Windows Open Windows terminal choice (.e. Terminal, PowerShell, Git Bash) run: Mac Open Mac terminal choice (.e. default Terminal) run:","code":"rstudio path/to/your/rstudio/folder/Rstudio.exe open -na Rstudio"},{"path":"https://appsilon.github.io/rhino/articles/explanation/node-js-javascript-and-sass-tools.html","id":"build_sass-function","dir":"Articles > Explanation","previous_headings":"About","what":"build_sass() function","title":"Explanation: Node.js - JavaScript and Sass tools","text":"build_sass() function worth additional comment. Depending configuration rhino.yml can use either sass Node.js package sass R package. recommend Node.js version, primary, actively developed implementation Sass. contrast, R package uses deprecated LibSass implementation.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html","id":"snapshot-types","dir":"Articles > Explanation","previous_headings":"","what":"Snapshot types","title":"Explanation: Renv configuration","text":"renv offers different snapshot types. default performs implicit snapshot: tries detect dependencies project scanning R sources. convenient small projects, approach lacks fine control can inefficient larger code bases. preferable use explicit snapshots: dependencies project must listed DESCRIPTION file. Unfortunately faced issues snapshot type deployments. Instead, Rhino uses following setup: Implicit snapshot (configured renv/settings.dcf). dependencies.R file dependencies listed explicitly library() calls. .renvignore file tells renv read dependencies.R. solution offers us benefits explicit snapshots (fine control, efficiency) works well deployment.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html","id":"manual-dependency-management","dir":"Articles > Explanation","previous_headings":"","what":"Manual dependency management","title":"Explanation: Renv configuration","text":"cases functions need rhino::pkg_install() rhino::pkg_remove(). However still possible manage dependencies using underlying renv functions directly. can helpful unusual situations (e.g. broken lockfile, installing specific package version). renv save lockfile packages installed local library, remove packages installed. Thus always run renv::restore(clean = TRUE) performing steps .","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html","id":"add-a-dependency","dir":"Articles > Explanation","previous_headings":"Manual dependency management","what":"Add a dependency","title":"Explanation: Renv configuration","text":"Add library(package) line dependencies.R. Call renv::install(\"package\"). Call renv::snapshot().","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html","id":"update-a-dependency","dir":"Articles > Explanation","previous_headings":"Manual dependency management","what":"Update a dependency","title":"Explanation: Renv configuration","text":"Call renv::update(\"package\"). Call renv::snapshot(). Calling renv::install(\"package\") instead renv::update(\"package\") effect.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html","id":"remove-a-dependency","dir":"Articles > Explanation","previous_headings":"Manual dependency management","what":"Remove a dependency","title":"Explanation: Renv configuration","text":"Remove library(package) line dependencies.R. Call renv::snapshot(). Call renv::restore(clean = TRUE). recommended use renv::remove() function, remove package local library even still required packages. example, renv::remove(\"glue\") followed renv::snapshot() leave without glue package lockfile, even though required shiny.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-style-guide.html","id":"explicit-import","dir":"Articles > Explanation","previous_headings":"","what":"Explicit Import","title":"Explanation: Rhino style guide","text":"clarity ease tracking function origins, avoid using [...] imports. Explicitly declare packages, modules functions.","code":"# Good box::use(   infer[specify],   shiny, )  # Bad box::use(   infer[...],   shiny[...], )  observe() # Is it from {infer} or {shiny}?"},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-style-guide.html","id":"trailing-commas","dir":"Articles > Explanation","previous_headings":"","what":"Trailing Commas","title":"Explanation: Rhino style guide","text":"Trailing commas box::use statements encouraged. simplify line additions reordering.","code":"# Good box::use(   shiny, )  # Bad box::use(   shiny )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-style-guide.html","id":"separated-statements-for-packages-and-modules","dir":"Articles > Explanation","previous_headings":"","what":"Separated Statements for Packages and Modules","title":"Explanation: Rhino style guide","text":"Use separate box::use statements importing packages modules (R scripts) better structure readability.","code":"# Good box::use(   rhino[log],   shiny, )  box::use(   path/to/module, )  # Bad box::use(   rhino[log],   shiny,   path/to/module, )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-style-guide.html","id":"order-of-imports","dir":"Articles > Explanation","previous_headings":"","what":"Order of Imports","title":"Explanation: Rhino style guide","text":"Order imports alphabetically ease locating specific import. applies packages/modules functions within .","code":"# Good box::use(   rhino,   shiny[div, fluidPage], )  # Bad box::use(   shiny[fluidPage, div],   rhino, )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-style-guide.html","id":"number-of-imports","dir":"Articles > Explanation","previous_headings":"","what":"Number of Imports","title":"Explanation: Rhino style guide","text":"Limit number functions imported module package 8. 8 functions needed, import entire package reference functions using package$function. Aliases can used convenience. Check box::use documentation details.","code":"# Good box::use(   rhino[log],   shiny, )  # Bad box::use(   rhino[log],   shiny[div, fluidPage, navbarPage, sidebarPanel, sidebarLayout, mainPanel, tabPanel, tabsetPanel, titlePanel], )"},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-yml.html","id":"configure-rhino-with-rhino-yml","dir":"Articles > Explanation","previous_headings":"","what":"Configure Rhino with rhino.yml","title":"Explanation: Configuring Rhino - rhino.yml","text":"Rhino uses rhino.yml config file can set options works app. Currently available options described .","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-yml.html","id":"rhino-yml-options","dir":"Articles > Explanation","previous_headings":"Configure Rhino with rhino.yml","what":"rhino.yml options","title":"Explanation: Configuring Rhino - rhino.yml","text":"","code":"sass: string               # required | one of: \"node\", \"r\" legacy_entrypoint: string  # optional | one of: \"app_dir\", \"source\", \"box_top_level\""},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-yml.html","id":"sass","dir":"Articles > Explanation","previous_headings":"Configure Rhino with rhino.yml > rhino.yml options","what":"sass","title":"Explanation: Configuring Rhino - rhino.yml","text":"Configures whether Sass built using R package Node.js package. Read Explanation: Node.js - JavaScript Sass tools.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/rhino-yml.html","id":"legacy_entrypoint","dir":"Articles > Explanation","previous_headings":"Configure Rhino with rhino.yml > rhino.yml options","what":"legacy_entrypoint","title":"Explanation: Configuring Rhino - rhino.yml","text":"setting useful migrating existing Shiny application Rhino. details see rhino::app() details section.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/what-is-rhino.html","id":"what-is-rhino","dir":"Articles > Explanation","previous_headings":"","what":"What is Rhino?","title":"Explanation: What is Rhino?","text":"Rhino R package designed help build high quality, enterprise-grade Shiny applications speed. allows create Shiny apps “Appsilon Way” - like fullstack software engineer: apply best software engineering practices, modularize code, test well, make UI beautiful think adoption beginning. Rhino opinionated framework focus best practices development tools. started series internal projects Appsilon aiming : Save time avoid repetitive tasks: include best practices care beginning project. Unify applications’ architecture: provide sensible defaults don’t reinvent wheel. Automate codify existing practices: pass knowledge form code instead documents manuals. past years, building internal tools address issues help us easily structure projects fast way. since evolved R package now excited share Shiny community. Please keep mind project early stages. wanted get something R community look forward continuing development feedback users. just beginning.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/what-is-rhino.html","id":"why-rhino","dir":"Articles > Explanation","previous_headings":"","what":"Why Rhino?","title":"Explanation: What is Rhino?","text":"Rhino helps build Shiny apps faster, making reliable easier maintain. bundles coherent way set tools practices beneficial Shiny applications, especially enterprise. may want use Rhino : need nested files structure handle bigger application. want follow complete set solutions built industry experience, avoid spending time “reinventing wheel”. ’d like scalable, modularized application clear code organization neat separation responsibilities. Rhino can serve guide understanding concepts (box, Shiny modules, view / logic separation). want save time avoid repetitive tasks. Rhino allows quickly start Shiny project set preconfigured development tools (linters, CI, Cypress, logging, Sass JS building) building application production use enterprise - need make sure ’s highly maintainable reliable long term. Shiny applications can converted Rhino project less 2 hours.","code":""},{"path":"https://appsilon.github.io/rhino/articles/explanation/what-is-rhino.html","id":"similar-projects","dir":"Articles > Explanation","previous_headings":"","what":"Similar projects","title":"Explanation: What is Rhino?","text":"Rhino first project kind aimed helping Shiny community enhance structure applications. believe value, developer decide best project. Rhino different …? golem: Rhino apps R packages. Rhino puts emphasis development tools, clean configuration minimal boilerplate tries provide default solutions typical problems questions areas. leprechaun: Leprechaun works scaffolding Shiny apps, without adding dependencies. Rhino minimizes generated code aims provide complete foundation building Shiny apps ready deployment enterprise, can focus application’s logic user experience. devtools: devtools streamlines packages development. Rhino complete framework building Shiny apps. Rhino features interdependent (e.g. coverage unit tests) used without making app basic Rhino structure. usethis: usethis adds independent code snippets ask . Rhino complete framework building Shiny apps. app designed call Rhino functions instead insert code project.","code":""},{"path":"https://appsilon.github.io/rhino/articles/faq.html","id":"running-and-deployment","dir":"Articles","previous_headings":"","what":"Running and deployment","title":"FAQ","text":"run Rhino application? can run Rhino application exactly regular Shiny app: using shiny::runApp() using “Run app” button RStudio automatically reload application development? Call options(shiny.autoreload = TRUE) R session. Shiny monitor app directory reload connected sessions changes detected. details can found Shiny reference. use specific port running Rhino application? can: set port shiny::runApp, e.g. shiny:runApp(port = 5000) add options(shiny.port = 5000) .Rprofile file details can found -: Set application run parameters. deploy Rhino application? case regular Shiny app, e.g. can use “Deploy” button RStudio IDE.","code":""},{"path":"https://appsilon.github.io/rhino/articles/faq.html","id":"differences-between-rhino-and-vanilla-shiny","dir":"Articles","previous_headings":"","what":"Differences between Rhino and vanilla Shiny","title":"FAQ","text":"server.R ui.R files? Instead server.R ui.R, Rhino uses single file app/main.R. includes server UI part application. main difference already Shiny modules need use namespace (ns) UI part. global.R file? Rhino encourages work encapsulated modules instead using global objects, thus include global.R file. Instead, objects default available level particular script. Depending context, objects can shared explicitly, passed argument exported @export. put library calls? Rhino application doesn’t use library load packages. Instead, script imports dependencies box::use: place use library calls dependencies.R file. can read managing R dependencies article. www directory? Instead www, Rhino uses app/static. utilize , need provide path assets include static, example:","code":"box::use(   dplyr, # functions from `dplyr` are available using `$`, e.g. `dplyr$mutate()`   shiny[div, moduleServer, NS], # `div`, `moduleServer`, and `NS` are available (but other functions from `shiny` are not) ) img(src = \"static/images/appsilon-logo.png\")"},{"path":"https://appsilon.github.io/rhino/articles/faq.html","id":"common-problems","dir":"Articles","previous_headings":"","what":"Common problems","title":"FAQ","text":"doesn’t input trigger reactive chain? Rhino uses Shiny modules encapsulate whole application, id every input create needs wrapped ns, example: output visible? Rhino uses Shiny modules encapsulate whole application, id every output create needs wrapped ns, example: shinyBS working Rhino application. shinyBS uses .onAttach() hook call shiny::addResourcePath() necessary resources (JS CSS) loaded correctly. hook never run box::use() (normally library() call run ). worth noting problem also present vanilla Shiny use :: access shinyBS functions (shinyBS use .onLoad() instead). Workaround: Add following snippet app/main.R (just box::use() statements good place): ’ll still need explicitly box::use() whatever functions need shinyBS (library() doesn’t work box module). details can found . R package installed, renv::snapshot() didn’t add renv.lock file. Rhino, renv uses packages added dependencies.R file. way full control libraries used application. Adding library(package name) dependencies.R file fix problem. Check also: renv configuration dependencies management.","code":"box::use(   shiny[NS, textInput], )  #' @export ui <- function(id) {   ns <- NS(id)    textInput(     inputId = ns(\"my_input\"),     label = \"My Input\"   ) } box::use(   shiny[moduleServer, NS, renderText, textOutput], )  #' @export ui <- function(id) {   ns <- NS(id)    textOutput(ns(\"text\")) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$text <- renderText(\"This is a message!\")   }) } # Run the `.onAttach` hook (shinyBS uses it to add a Shiny resource path). suppressWarnings(library(shinyBS))"},{"path":"https://appsilon.github.io/rhino/articles/faq.html","id":"styling-rhino-application","dir":"Articles","previous_headings":"","what":"Styling Rhino application","title":"FAQ","text":"Can use multiple Sass files? Yes, can file/directory structure app/styles desire. app/styles/main.scss entry point: ’ll need @use files main.scss. running rhino::build_sass() sufficient include styles application.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/communicate-between-modules.html","id":"introduction","dir":"Articles > How-to","previous_headings":"","what":"Introduction","title":"How-to: Communicate between modules","text":"State management topic comes along often comes reactive programming. application grows size becomes intricate, ’s common find increasing number Shiny modules distributed across various levels depth. results necessity share information, particularly application’s state, among diverse Shiny modules. many ways approach problem going present two examples. first example going pass information (reactive objects) parent module child module second example going pass information two sibling modules.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/how-to/communicate-between-modules.html","id":"example-1---communicating-between-a-parent-module-and-its-children-modules","dir":"Articles > How-to","previous_headings":"Examples","what":"Example 1 - Communicating between a parent module and its children modules","title":"How-to: Communicate between modules","text":"example going two modules. parent module load process data using filters pass child module display table processed data. Figure 1. Diagram illustrating reactive value passed parent child module. Now, let’s explore code look like: Let’s start table module. Remember Figure 1 module receives reactive object data display parent module. continue usage table module within parent module. read_data_from_database process_data imported utils.R module mocked functions using purpose aiding example. functions defined example code.","code":"box::use(   shiny[div, moduleServer, NS, renderTable, req, tableOutput], )  #' @export ui <- function(id) {   ns <- NS(id)   div(     tableOutput(       outputId = ns(\"table\")     )   ) }  #' @params id The Id of this shiny module #' @params table_data A reactive that contains that the data that will be #' displayed in the table. #' @export server <- function(id, table_data) {   moduleServer(id, function(input, output, session) {          output$table <- renderTable({       req(table_data())       table_data()     })    }) } # Parent Module box::use(   shiny[     div, moduleServer, NS, reactive, req, selectInput   ], )  box::use(   table_module = app/view/table_module.R,   utils = utils/utils.R # This module is not defined in this example )  #' @export ui <- function(id) {   ns <- NS(id)   div(     selectInput(       inputId = ns(\"filters\"),       label = \"Select filters\",       choices = c(\"Parameter A\", \"Parameter B\", \"Parameter C\")     ),     table_module$ui(ns(\"table_module\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     input_data <- utils$read_data_from_database()      # Define a reactive to pass down the table module     processed_data <- reactive({       process_data(input_data, input$filters)     })      # Initialize the table module server function     table_module$server(id = \"table_module\", table_data = processed_data)   }) }"},{"path":"https://appsilon.github.io/rhino/articles/how-to/communicate-between-modules.html","id":"example-2---communicating-between-two-sibling-modules","dir":"Articles > How-to","previous_headings":"Examples","what":"Example 2 - Communicating between two sibling modules","title":"How-to: Communicate between modules","text":"Suppose data processing module plotting module, functioning siblings, respective roles process exhibit data given plot. sibling modules nested within another module, ’ve denoted main.R main module within Rhino app. Figure 2. Diagram illustrating reactive value passed sibling modules. Let’s explore code modules look like: read_data_from_database process_data imported utils.R module mocked functions using purpose aiding example. functions defined example code. plotting module: sibling modules ready use main.R function. Pay special attention server function save output data processing module variable pass plot module. sum , aforementioned example, data processing module returns reactive holds processed data. Subsequently, reactive passed server function plotting module. plotting module utilizes specific reactive, containing processed data, create visualizations.","code":"# processing_data_module.R box::use(   shiny[     div, moduleServer, NS, reactive, req, selectInput   ], )  box::use(   utils = utils/utils.R # This module is not defined in this example )  #' @export ui <- function(id) {   ns <- NS(id)   div(     selectInput(       inputId = ns(\"parameter\"),       label = Select a parameter,       choices = c(\"alfa\", \"beta\", \"gamma\")     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     example_data <- utils$read_data_from_database()      reactive({       utils$process_data(example_data, input$parameter)     })   }) } # plotting_module.R box::use(   shiny[div, moduleServer, NS, plotOutput, renderPlot, req],   graphics[plot], )   #' @params id Id of the module #' @export ui <- function(id) {   ns <- NS(id)   div(     plotOutput(       inputId = ns(\"plot\")     )   ) )  #' @params id Id of the module #' @params data_to_display A reactive that contains that the data that will be #' plotted #' @export server <- function(id, data_to_display) {   moduleServer(id, function(input, output, session) {        output$plot <- renderPlot({       req(data_to_display)       plot(data_to_display())     })       }) } box::use(   shiny[bootstrapPage, div, moduleServer, NS], )  box::use(   data_module = app/view/processing_data_module,   plot_module = app/view/plotting_module )   #' @export ui <- function(id) {   ns <- NS(id)   bootstrapPage(     div(       data_module(ns(\"data_module\"))     ),     div(       plot_module$ui(ns(\"plot_module\"))     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     # Saving the output of the data_module     data_to_display <- data_module$server(\"data_module\")     # Passing `data_to_display` to the sibling module     plot_module$server(\"plot_module\", data_to_display)   }) }"},{"path":"https://appsilon.github.io/rhino/articles/how-to/manage-secrets-and-environments.html","id":"secrets","dir":"Articles > How-to","previous_headings":"","what":"Secrets","title":"How to: Manage secrets and environments","text":"Secrets confidential information tracked version control system. Therefore, natural place system environment variables. Variables set system environment can retrieved within code Sys.getenv(). R provides way easily set environment variables. Upon session start (restart) R reads .Renviron file contents sets environment variables. .Renviron Secrets defined via environment variables can read used following way:","code":"# A comment in .Renviron file DATABASE_PASSWORD=\"foobar123!\" API_KEY=\"75170fc230cd88f32e475ff4087f81d9\" db_password <- Sys.getenv(\"DATABASE_PASSWORD\") if (db_password == \"\") {   # Handle unset or empty DATABASE_PASSWORD variable } pool <- pool::dbPool(   drv = RMySQL::MySQL(),   dbname = \"...\",   host = \"...\",   username = \"admin\",   password = db_password )"},{"path":"https://appsilon.github.io/rhino/articles/how-to/manage-secrets-and-environments.html","id":"recommendations-for-storing-secrets","dir":"Articles > How-to","previous_headings":"Secrets","what":"Recommendations for storing secrets","title":"How to: Manage secrets and environments","text":"Store secrets environment variables .Renviron. Use separate .Renviron file every environment. Swap whole file changing environments. Use CONSTANT_CASE variable names. track .Renviron file version control system. Store secure location, e.g. password manager. publish .Renviron RStudio Connect shinyapps.io. , RStudio Connect Shiny Apps, provide means manage environment variables.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/manage-secrets-and-environments.html","id":"environments","dir":"Articles > How-to","previous_headings":"","what":"Environments","title":"How to: Manage secrets and environments","text":"every configurable setting stored environment variable result overgrown .Renviron files. ’s configurable environments come . Everything confidential can tracked version control system. Rhino endorses use config package managing environments. config.yml .Renviron can access configuration variables following way:","code":"default:   rhino_log_level: !expr Sys.getenv(\"RHINO_LOG_LEVEL\", \"INFO\")   rhino_log_file: !expr Sys.getenv(\"RHINO_LOG_FILE\", NA)   database_user: \"service_account\"   database_schema: \"dev\"  dev:   rhino_log_level: !expr Sys.getenv(\"RHINO_LOG_LEVEL\", \"DEBUG\")  staging:   database_schema: \"stg\"  production:   database_user: \"service_account_prod\"   database_schema: \"prod\" R_CONFIG_ACTIVE=\"dev\" box::use(config)  config$get(\"rhino_log_level\") # == \"DEBUG\" config$get(\"database_user\") # == \"service_account\"  config$get(\"rhino_log_level\", config = \"production\") # == \"INFO\" config$get(\"database_user\", config = \"production\") # == \"service_account_prod\"  withr::with_envvar(list(RHINO_LOG_LEVEL = \"ERROR\"), {   config$get(\"rhino_log_level\") # == \"ERROR\"   config$get(\"rhino_log_level\", config = \"production\") # == \"ERROR\" })"},{"path":"https://appsilon.github.io/rhino/articles/how-to/manage-secrets-and-environments.html","id":"recommendations-for-managing-environments","dir":"Articles > How-to","previous_headings":"Environments","what":"Recommendations for managing environments","title":"How to: Manage secrets and environments","text":"Define environments settings config.yml. Select config setting R_CONFIG_ACTIVE variable .Renviron. Make use default values. Use !expr Sys.getenv() make settings overridable environment variables. Import config box call usual, .e. box::use(config) config$get(). Use snake_case field names.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"prerequisites","dir":"Articles > How-to","previous_headings":"","what":"Prerequisites","title":"How-to: Rhino 1.6 Migration Guide","text":"Back project data. Ensure Node.js --date machine.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"installation-of-rhino-1-6","dir":"Articles > How-to","previous_headings":"","what":"Installation of Rhino 1.6","title":"How-to: Rhino 1.6 Migration Guide","text":"Choose one following methods install Rhino 1.6:","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"option-1-using-renv","dir":"Articles > How-to","previous_headings":"Installation of Rhino 1.6","what":"Option 1: Using renv","title":"How-to: Rhino 1.6 Migration Guide","text":"Install Rhino using renv take snapshot project dependencies:","code":"renv::install(\"rhino\") renv::snapshot()"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"option-2-using-rhinopkg_install-for-rhino-v1-4","dir":"Articles > How-to","previous_headings":"Installation of Rhino 1.6","what":"Option 2: Using rhino::pkg_install (for Rhino v1.4+)","title":"How-to: Rhino 1.6 Migration Guide","text":"newer versions Rhino, can use built-package installation function: installation, restart R session ensure changes take effect.","code":"rhino::pkg_install(\"rhino\")"},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"step-1-remove-the--rhino-directory","dir":"Articles > How-to","previous_headings":"Migration Steps","what":"Step 1: Remove the .rhino Directory","title":"How-to: Rhino 1.6 Migration Guide","text":"Locate remove .rhino directory root project. directory contains configuration settings previous version Rhino.","code":"rm -rf .rhino"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"step-2-run-node-tool-functions","dir":"Articles > How-to","previous_headings":"Migration Steps","what":"Step 2: Run Node Tool Functions","title":"How-to: Rhino 1.6 Migration Guide","text":"Invoke one following commands run Node tools. action regenerate .rhino directory new configuration, including updated Node modules.","code":"rhino::build_sass() rhino::lint_sass() rhino::build_js() rhino::lint_js()"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"step-3-migrate-cypress-end-to-end-tests","dir":"Articles > How-to","previous_headings":"Migration Steps","what":"Step 3: Migrate Cypress End-to-End Tests","title":"How-to: Rhino 1.6 Migration Guide","text":"project includes Cypress end--end tests, initiate migration wizard : Follow prompts migration wizard update end--end tests.","code":"rhino::test_e2e(interactive = TRUE)"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"step-4-test-your-project","dir":"Articles > How-to","previous_headings":"Migration Steps","what":"Step 4: Test Your Project","title":"How-to: Rhino 1.6 Migration Guide","text":"Conduct extensive testing confirm components project function properly migration.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-6.html","id":"final-steps","dir":"Articles > How-to","previous_headings":"","what":"Final Steps","title":"How-to: Rhino 1.6 Migration Guide","text":"encounter issues questions migrating Rhino 1.6, please consult GitHub discussions Rhino community developer support.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-7.html","id":"step-1-install-rhino-1-7","dir":"Articles > How-to","previous_headings":"","what":"Step 1: Install Rhino 1.7","title":"How-to: Rhino 1.7 Migration Guide","text":"Use following command install Rhino 1.7 update renv.lock file: installation, restart R session ensure changes take effect.","code":"rhino::pkg_install(\"rhino@1.7.0\")"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-7.html","id":"step-2-update-your-linter-rules","dir":"Articles > How-to","previous_headings":"","what":"Step 2: Update your linter rules","title":"How-to: Rhino 1.7 Migration Guide","text":"Edit .lintr file project includes following rules:","code":"linters:   linters_with_defaults(     box_func_import_count_linter = rhino::box_func_import_count_linter(),     box_separate_calls_linter = rhino::box_separate_calls_linter(),     box_trailing_commas_linter = rhino::box_trailing_commas_linter(),     box_universal_import_linter = rhino::box_universal_import_linter(),     line_length_linter = line_length_linter(100),     object_usage_linter = NULL  # Does not work with `box::use()`.   )"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-1-7.html","id":"step-3-test-your-project","dir":"Articles > How-to","previous_headings":"","what":"Step 3: Test your project","title":"How-to: Rhino 1.7 Migration Guide","text":"Test project thoroughly ensure everything works properly migration. particular, run rhino::lint_r() fix problems reports. encounter issues questions, don’t hesitate reach us via GitHub Discussions.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"prepare-your-application-for-rhinoinit","dir":"Articles > How-to","previous_headings":"","what":"Prepare Your Application for rhino::init()","title":"How-to: Migrate app to Rhino","text":", able run application using shiny::shinyAppDir(\"app\").","code":". └── app     ├── utils     │   ├── bar.R     │   └── foo.R     ├── www     │   ├── main.css     │   └── main.js     ├── server.R     └── ui.R . ├── app │   ├── utils │   │   ├── bar.R │   │   └── foo.R │   ├── www │   │   ├── main.css │   │   └── main.js │   ├── server.R │   └── ui.R └── dependencies.R"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"what-if-my-app-uses-renv","dir":"Articles > How-to","previous_headings":"Prepare Your Application for rhino::init()","what":"What if: My App Uses renv","title":"How-to: Migrate app to Rhino","text":"used renv application, chances active renv session Rhino installed. address either deactivate renv run renv::install(\"rhino\"). Apart additional files related renv, target file structure different one presented .","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"initialize-your-rhino-application","dir":"Articles > How-to","previous_headings":"","what":"Initialize Your Rhino Application","title":"How-to: Migrate app to Rhino","text":"use renv , Rhino initialized . However, use renv, Rhino added necessary dependencies renv.lock file.","code":". ├── .github │   └── workflows │       └── rhino-test.yml ├── app │   ├── js │   │   └── index.js │   ├── logic │   │   └── __init__.R │   ├── static │   │   └── favicon.ico │   ├── styles │   │   └── main.scss │   ├── utils │   │   ├── bar.R │   │   └── foo.R │   ├── view │   │   └── __init__.R │   ├── www │   │   ├── main.css │   │   └── main.js │   ├── main.R │   ├── server.R │   └── ui.R ├── renv │   └── ... ├── tests │   ├── cypress │   │   ├── e2e │   │   └── .gitignore │   ├── testthat │   │   └── test-main.R │   └── cypress.json ├── .Rprofile ├── .lintr ├── .renvignore ├── app.R ├── dependencies.R ├── old.Rprofile ├── renv.lock ├── rhino.yml └── app.Rproj"},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"what-if-my-app-had--rprofile","dir":"Articles > How-to","previous_headings":"Initialize Your Rhino Application","what":"What if: My App Had .Rprofile","title":"How-to: Migrate app to Rhino","text":".Rprofile moved old.Rprofile. contained relevant bits (e.g. setting options), carry .Rprofile created Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"configure-your-rhino-application","dir":"Articles > How-to","previous_headings":"","what":"Configure Your Rhino Application","title":"How-to: Migrate app to Rhino","text":"last step get started Rhino configuring . minimal setup allows running application setting legacy_entrypoint rhino.yml. able run application immediately set legacy_entrypoint: app_dir, approach requires adjustments application’s structure. adjust adjust application fit best practices suggested Rhino, can modify legacy_entrypoint. Ultimately, application fully migrated Rhino, legacy_entrypoint setting can removed rhino.yml. Refer Next Steps section see continue improving application!","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"migrating-javascript-code","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Migrating JavaScript Code","title":"How-to: Migrate app to Rhino","text":"TODO: something along lines build_js() details","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"migrating-css-styles-to-sass","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Migrating CSS styles to SASS","title":"How-to: Migrate app to Rhino","text":"TODO","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"boxifying-application","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Boxifying Application","title":"How-to: Migrate app to Rhino","text":"TODO: adjusting application fit structure proposed Rhino","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/migrate-app-to-rhino.html","id":"additional-notes","dir":"Articles > How-to","previous_headings":"","what":"Additional notes","title":"How-to: Migrate app to Rhino","text":"process described rhino::init() documentation, albeit great detail. first step put app files app directory, can run shinyAppDir(\"app\"). Practical experience migrating apps shows ’s useful step quickly lets verify whether app still works. process can bit unintuitive however. example, already app.R file ui/server/global R subdirectory, still move whole structure app. case ’ll end app.R, app/app.R ui/server/global app/R/. two app.R files might feel awkward. general use rhino::init() migration. done via RStudio GUI. already .Rprofile renv migrating, ’ll load won’t Rhino inside. need run rhino::init() different directory (perhaps run renv::deactivate()). Rhino renv::load() renv.lock. particular set options(\"repos\") based renv.lock. get “unsatisfied dependencies” migration?","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"addins","dir":"Articles > How-to","previous_headings":"","what":"Addins","title":"How-to: Rhino Addins","text":"RStudio Addins provide mechanism executing R functions interactively within RStudio IDE either keyboard shortcuts, Addins menu.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"create-a-new-rhino-module","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Create a new Rhino Module","title":"How-to: Rhino Addins","text":"Jump start module development creating new R script document Rhino module template. Addin sets foundation module structure, letting dive straight coding.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"format-r-code","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Format R Code","title":"How-to: Rhino Addins","text":"Uses styler package automatically format R script. Addin ensures consistency readability.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"lint-r-code","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Lint R Code","title":"How-to: Rhino Addins","text":"Uses lintr package check R sources style errors. Identify address potential issues R scripts ease.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"run-r-tests","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Run R Tests","title":"How-to: Rhino Addins","text":"Uses {testhat} package run unit tests tests/testthat directory. Maintain functions components reliability.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"build-javascript","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Build JavaScript","title":"How-to: Rhino Addins","text":"Simplify process building JavaScript files using Babel Webpack. Builds app/js/index.js file app/static/js/app.min.js. Choose watch changes, automating build process whenever save JavaScript file.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"build-sass-styles","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Build Sass Styles","title":"How-to: Rhino Addins","text":"Effortlessly build Sass styles using Dart Sass sass R package. builds app/styles/main.scss file app/static/css/app.min.css. Opt watch changes, allowing automatic rebuilding style sheets.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"lint-javascript","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Lint JavaScript","title":"How-to: Rhino Addins","text":"Runs ESLint JavaScript sources app/js directory. performs linting JavaScript files ease. Opt fix issues automatically fixing directly.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"lint-sass-styles","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Lint Sass Styles","title":"How-to: Rhino Addins","text":"Runs Stylelint Sass sources app/styles directory. Choose automatically fix issues streamline process linting Sass styles.","code":""},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-addins.html","id":"run-end-to-end-tests","dir":"Articles > How-to","previous_headings":"Available Addins","what":"Run End-to-End Tests","title":"How-to: Rhino Addins","text":"Execute Cypress end--end tests application. Choose interactive non-interactive modes validate application behavior.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-global-variables.html","id":"vanilla-r","dir":"Articles > How-to","previous_headings":"Global Variables","what":"Vanilla R","title":"How-to: Use global variables","text":"R, global variables live inside .GlobalEnv. Global variables can updated within function using <<-. code loaded box::use(), global variables live inside module’s immutable environment. Updating global variables <<- work.","code":"# constants.R answer <- 42 set_answer <- function(new_answer) {   answer <<- new_answer } # main.R source(\"constants.R\")  print(answer) # 42 set_answer(0) print(answer) # 0 # app/logic/constants.R  #' @export answer <- 42  #' @export set_answer <- function(new_answer) {   answer <<- new_answer } # app/main.R box::use(app/logic/constants)  print(constants$answer) # 42 constants$set_answer(0) # Error: cannot change value of locked binding."},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-global-variables.html","id":"variables-in-a-new-environment","dir":"Articles > How-to","previous_headings":"Global Variables","what":"Variables in a new environment","title":"How-to: Use global variables","text":"overcome box’s feature limiting scope, Rhino suggests creating new environment use environment contain global variables.","code":"# app/logic/__init__.R  #' @export global <- new.env() global$answer <- 42  #' @export set_answer <- function(new_answer) {   global$answer <- new_answer } # app/logic/get_answer.R box::use(   app/logic[global, set_answer], )  print(global$answer) # 42 set_answer(0) print(global$answer) # 0"},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-global-variables.html","id":"variables-in--globalenv","dir":"Articles > How-to","previous_headings":"Global Variables","what":"Variables in .GlobalEnv","title":"How-to: Use global variables","text":"Alternatively, variables can still stored imported .GlobalEnv. variable must also defined updated using <-.","code":"# app/logic/__init__.R .GlobalEnv$answer <- 42  #' @export set_answer <- function(new_answer) {   .GlobalEnv$answer <- new_answer } # app/logic/get_answer.R box::use(app/logic[set_answer])  print(.GlobalEnv$answer) # 42 set_answer(0) print(.GlobalEnv$answer) # 0"},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-global-variables.html","id":"session-variables","dir":"Articles > How-to","previous_headings":"","what":"Session Variables","title":"How-to: Use global variables","text":"Rhino suggests using arguments module servers explicit handling session variables user inputs. However, shiny support session$userData, environment can store session-specific data. modules access variables inside session$userData.","code":"module_ui <- function(id) {   ns <- NS(id)   textOutput(ns(\"answer\")) }  module_server <- function(id, answer) {   moduleServer(id, function(input, output, session) {     output$answer <- renderText(answer())   }) }  shinyApp(   ui = bootstrapPage(     textInput(\"answer\", \"Answer\"),     module_ui(\"module\")   ),   server = function(input, output, session) {     answer <- reactive(input$answer)     module_server(\"module\", answer)   } ) module_ui <- function(id) {   ns <- NS(id)   textOutput(ns(\"answer\")) }  module_server <- function(id) {   moduleServer(id, function(input, output, session) {     output$answer <- renderText(session$userData$answer())   }) }  shinyApp(   ui = bootstrapPage(     textInput(\"answer\", \"Answer\"),     module_ui(\"module\")   ),   server = function(input, output, session) {     session$userData$answer <- reactive(input$answer)     module_server(\"module\")   } )"},{"path":"https://appsilon.github.io/rhino/articles/how-to/use-shinymanager.html","id":"bookmarking","dir":"Articles > How-to","previous_headings":"","what":"Bookmarking","title":"How-to: Use shinymanager","text":"want use bookmarking together shinymanager, need wrap UI passed secure_app() function:","code":"shiny$enableBookmarking()  #' @export ui <- shinymanager$secure_app(   # Wrap the UI passed to `secure_app()` in a function with a `request` parameter.   function(request) {     shiny$bootstrapPage(       shiny$bookmarkButton(),       shiny$textInput(\"name\", \"Name\"),       shiny$textOutput(\"message\")     )   } )"},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"how-to-install-rhino","dir":"Articles > Tutorial","previous_headings":"Setup","what":"How to install Rhino?","title":"Tutorial: Create your first Rhino app","text":"get started, first thing need install Rhino :","code":"install.packages(\"rhino\")"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"dependencies","dir":"Articles > Tutorial","previous_headings":"Setup","what":"Dependencies","title":"Tutorial: Create your first Rhino app","text":"tutorial uses native pipe operator (|>) introduced R 4.1 release. use earlier R version, can use %>% pipe operator found magrittr dplyr packages instead. use state art JavaScript Sass development tools provided Rhino, ’ll need install Node.js (v16 later) system. Rhino still work without Node.js limitations (described JavaScript Sass sections).","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-initial-application","dir":"Articles > Tutorial","previous_headings":"","what":"Create an initial application","title":"Tutorial: Create your first Rhino app","text":"Creating new Rhino application can done two ways - running rhino::init() function using RStudio Create Project functionality.","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-application-using-the-rstudio-wizard","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Create an application using the RStudio wizard","title":"Tutorial: Create your first Rhino app","text":"use RStudio, probably easiest way create new Rhino application simply use Create New Project feature. Rhino installed, automatically added one options RStudio: Choose , input new project name ready go.","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-application-using-rhinoinit","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Create an application using rhino::init()","title":"Tutorial: Create your first Rhino app","text":"Creating Rhino application possible R console running init function: two things need know choosing way initializing application: Rhino change working directory. need either open new R session new application directory manually change working directory. Rhino relies options added projects .Rprofile file. robust way make sure correctly sourced simply restart R session. result paths initial Rhino application following structure: want know , check document.","code":"rhino::init(\"RhinoApplication\") setwd(\"./RhinoApplication\") . ├── app │   ├── js │   │   └── index.js │   ├── logic │   │   └── __init__.R │   ├── static │   │   └── favicon.ico │   ├── styles │   │   └── main.scss │   ├── view │   │   └── __init__.R │   └── main.R ├── tests │   ├── cypress │   │   └── e2e │   │       └── app.cy.js │   ├── testthat │   │   └── test-main.R │   └── cypress.json ├── app.R ├── RhinoApplication.Rproj ├── dependencies.R ├── renv.lock └── rhino.yml"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"running-the-application","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Running the application","title":"Tutorial: Create your first Rhino app","text":"Now, set , let’s run : seeing right now:","code":"shiny::runApp()"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-your-first-module","dir":"Articles > Tutorial","previous_headings":"","what":"Add your first module","title":"Tutorial: Create your first Rhino app","text":"application runs, doesn’t meaningful functionality. Let’s add something !","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"module-structure","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Module structure","title":"Tutorial: Create your first Rhino app","text":"Rhino, application view intended live Shiny module use encapsulation provided box package. Rhino already created good place new modules, app/view directory. Create file , named chart.R:","code":"# app/view/chart.R  box::use(   shiny[h3, moduleServer, NS], )  #' @export ui <- function(id) {   ns <- NS(id)    h3(\"Chart\") }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     print(\"Chart module server part works!\")   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"calling-a-module","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Calling a module","title":"Tutorial: Create your first Rhino app","text":"next step call new module application. First, need import main application file. , add another box::use section app/main.R file: Now, main module able use exported functions chart.R. Let’s try ! Modify app/main.R file look like : Now, run application, see message newly created module:","code":"# app/main.R  box::use(   app/view/chart, )  ... # app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS], ) box::use(   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     chart$server(\"chart\")   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"adding-components-to-a-module","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Adding components to a module","title":"Tutorial: Create your first Rhino app","text":"Now time start adding something new module. can add “chart” module? ’re right, chart. Let’s add chart rhinoceros dataset available Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"adding-r-packages","dir":"Articles > Tutorial","previous_headings":"Add your first module > Adding components to a module","what":"Adding R packages","title":"Tutorial: Create your first Rhino app","text":"First, need install library visualizations - , go echarts4r. using total 5 packages application. save us time tutorial install . function install packages, update dependencies.R renv.lock files accordingly. Note: Package htmlwidgets already installed since dependency shiny, still add dependencies.R file.","code":"# In R console rhino::pkg_install(c(\"dplyr\", \"echarts4r\", \"htmlwidgets\", \"reactable\", \"tidyr\"))"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-dependencies-to-the-module","dir":"Articles > Tutorial","previous_headings":"Add your first module > Adding components to a module","what":"Add dependencies to the module","title":"Tutorial: Create your first Rhino app","text":"Now, packages available project environment, ’s time use . First, need import module. Extend box::use call app/view/chart.R file: can use packages module calling {package}${function}. options importing box check link. Add echarts4r render server part module output part UI: One thing worth noting UI part use another function Shiny - tagList. able , adjust import box::use - simply add tagList list imported functions. Finally, run application, see something similar :","code":"# app/view/chart.R  box::use(   echarts4r,   shiny[h3, moduleServer, NS, tagList], )  ... # app/view/chart.R  box::use(   echarts4r,   shiny[h3, moduleServer, NS, tagList],   rhino[rhinos], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       rhinos |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(Year) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-a-second-module","dir":"Articles > Tutorial","previous_headings":"","what":"Add a second module","title":"Tutorial: Create your first Rhino app","text":"content presented application, great add table show dataset. , let’s create another module - app/view/table.R:","code":"# app/view/table.R  box::use(   shiny[h3, moduleServer, NS, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\")   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {    }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"calling-the-second-module","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Calling the second module","title":"Tutorial: Create your first Rhino app","text":", need call new module main.R file:","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     table$ui(ns(\"table\")),     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     table$server(\"table\")     chart$server(\"chart\")   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"use-the-same-dataset-for-both-modules","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Use the same dataset for both modules","title":"Tutorial: Create your first Rhino app","text":"want use dataset modules, instead calling twice, let’s pass data argument:","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS],   rhino[rhinos], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     table$ui(ns(\"table\")),     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     data <- rhinos      table$server(\"table\", data = data)     chart$server(\"chart\", data = data)   }) } # app/view/table.R  box::use(   shiny[h3, moduleServer, NS, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\")   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {    }) } # app/view/chart.R  box::use(   echarts4r,   shiny[h3, moduleServer, NS, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(Year) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"create-a-table","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Create a table","title":"Tutorial: Create your first Rhino app","text":"table, go reactable package. Now can add table application. Let’s check raw data Rhinos: application look similar :","code":"# app/view/table.R  box::use(   reactable,   shiny[h3, moduleServer, NS, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\"),     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       reactable$reactable(data)     )   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-logic","dir":"Articles > Tutorial","previous_headings":"","what":"Add logic","title":"Tutorial: Create your first Rhino app","text":"seems great slightly adjust table. Let’s transform dataset little bit. recommend placing code can expressed without Shiny app/logic directory. Let’s create file , called app/logic/data_transformation.R. table better Rhino species separate column, easy compare populations across time. , need transform dataset using pivot_wider function tidyr package. Now able access function data_transformation.R file using box::use(). Let’s also create function wraps pivot_wider transforms data. Note , always, need add @export able access file sourced. next step call function table module. Add box import transform dataset: run application, see something similar :  can notice, table arranged Black Rhino population. make sense change Year using dplyr::arrange. Next, add arrange transform_data function: result looks much understandable:  still one element can improved. check X-axis chart, values contain comma. ’s default behavior integers, year! fix , need add custom formatter. Let’s create another file, app/logic/chart_utils.R: Finally, add formatter chart module: now look better:","code":"# app/logic/data_transformation.R  box::use(   tidyr[pivot_wider], )  #' @export transform_data <- function(data) {   pivot_wider(     data = data,     names_from = Species,     values_from = Population   ) } # app/view/table.R  box::use(   reactable,   shiny[h3, moduleServer, NS, tagList], ) box::use(   app/logic/data_transformation[transform_data], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\"),     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       data |>         transform_data() |>         reactable$reactable()     )   }) } # app/logic/data_transformation.R  box::use(   dplyr[arrange],   tidyr[pivot_wider], )  #' @export transform_data <- function(data) {   pivot_wider(     data = data,     names_from = Species,     values_from = Population   ) |>     arrange(Year) } # app/logic/chart_utils.R  box::use(   htmlwidgets[JS], )  #' @export label_formatter <- JS(\"(value, index) => value\") # app/view/chart.R  box::use(   echarts4r,   shiny[h3, moduleServer, NS, tagList], ) box::use(   app/logic/chart_utils[label_formatter], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(           Year,           axisLabel = list(             formatter = label_formatter           )         ) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-custom-styles","dir":"Articles > Tutorial","previous_headings":"","what":"Add custom styles","title":"Tutorial: Create your first Rhino app","text":"Note: Sass builder uses Node.js. able install Node environment, can change sass entry rhino.yml file r. now use R package Sass bundling. hood, uses deprecated C++ library, Node solution strongly recommended . stage, application working components, doesn’t clean organized look . need little CSS styling. Adjusting application style can done providing custom styles app/styles directory, first, need adjust application little bit adding HTML tags CSS classes: Now ready modify styles. Simply add CSS rules app/styles/mains.scss file: try running application right now, see changes. Rhino uses minified app/static/app.min.css styling. use , need build using Rhino function: Now, running application see something similar :  worth noting, don’t need add app/static/app.min.css application header - Rhino . Let’s adjust application little bit adding title: styling: Finally, build Sass : result look similar :","code":"# app/main.R  box::use(   shiny[bootstrapPage, div, moduleServer, NS],   rhino[rhinos], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     data <- rhinos      table$server(\"table\", data = data)     chart$server(\"chart\", data = data)   }) } # app/view/chart.R  box::use(   echarts4r,   shiny[div, moduleServer, NS], ) box::use(   app/logic/chart_utils[label_formatter], )  #' @export ui <- function(id) {   ns <- NS(id)    div(     class = \"component-box\",     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(           Year,           axisLabel = list(             formatter = label_formatter           )         ) |>         echarts4r$e_tooltip()     )   }) } # app/view/table.R  box::use(   reactable,   shiny[div, moduleServer, NS], ) box::use(   app/logic/data_transformation[transform_data], )  #' @export ui <- function(id) {   ns <- NS(id)    div(     class = \"component-box\",     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       data |>         transform_data() |>         reactable$reactable()     )   }) } // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } } # in R console rhino::build_sass() # app/main.R  box::use(   shiny[bootstrapPage, div, h1, moduleServer, NS], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     )   ) }  ... // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } }  h1 {   text-align: center;   font-weight: 900; } # in R console rhino::build_sass()"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/create-your-first-rhino-app.html","id":"add-javascript-code","dir":"Articles > Tutorial","previous_headings":"","what":"Add JavaScript code","title":"Tutorial: Create your first Rhino app","text":"Note: Rhino tools JS require Node.js. can still use JavaScript code like regular Shiny application, instead using www directory, add files static/js call using full path, e.g. tags$script(src = \"static/js/app.min.js\"). last element, let’s add button trigger JavaScript popup. First, need create simple button style : Remember rebuild Sass rhino::build_sass()! now see button question mark top right corner application:  Now, ’s time writing JavaScript code show popup message. JS code stored app/js directory. already first (empty) file - index.js. Let’s use : function simply show browser alert message. familiar JavaScript code used Shiny applications, notice one difference - keyword export added function name. Rhino, functions marked like available Shiny use. styles, Rhino application use JS files directly, instead utilizes minified version build rhino::build_js function. Try : Now app/static/js/app.min.js file created , minified CSS file, automatically included application head tag. last thing use showHelp() function application. , let’s simply add onclick button: probably noticed second difference classic Shiny approach one used Rhino. exported JS functions now available App (JavaScript function library, e.g. Math.round). Now, run application click button, see something like :  Congratulations! now fully armed operational battle station Rhino application!","code":"# app/main.R  box::use(   shiny[bootstrapPage, div, h1, icon, moduleServer, NS, tags], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     ),     tags$button(       id = \"help-button\",       icon(\"question\")     )   ) }  ... // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } }  h1 {   text-align: center;   font-weight: 900; }  #help-button {   position: fixed;   top: 0;   right: 0;   margin: 10px; } // app/js/index.js  export function showHelp() {   alert('Learn more about Rhino: https://appsilon.github.io/rhino/'); } # in R console rhino::build_js() # app/main.R  box::use(   shiny[bootstrapPage, div, h1, icon, moduleServer, NS, tags], ) box::use(   app/view/chart,   app/view/table, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     ),     tags$button(       id = \"help-button\",       icon(\"question\"),       onclick = \"App.showHelp()\"     )   ) }  ..."},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"starting-off","dir":"Articles > Tutorial","previous_headings":"","what":"Starting off","title":"Tutorial: Use React in Rhino","text":"start , let’s initialize fresh Rhino application. Launch R console empty directory run: use React Rhino need add shiny.react package project dependencies: Now, three steps add React component Rhino application: Define component using JSX. Declare component R. Use component application. Let’s go steps add simple Reveal component app.","code":"rhino::init() rhino::pkg_install(\"shiny.react\")"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"defining-the-component","dir":"Articles > Tutorial","previous_headings":"","what":"Defining the component","title":"Tutorial: Use React in Rhino","text":"use JSX, syntax extension JavaScript, define component. Create Reveal.jsx file app/js directory following content: Reveal component just <div> provided ID, button can used show hide children. make component available Rhino, need register . Edit app/js/index.js file like : Rhino global variable can used without declaration, similar Shiny. registerReactComponents() function takes object mapping component names definitions ({ Reveal } shorthand { Reveal: Reveal }). Lastly, need build JavaScript: create app/static/js/app.min.js file automatically included Rhino.","code":"const { useState } = React;  export default function Reveal({ id, children }) {   const [visible, setVisible] = useState(false);   return (     <div id={id}>       <button type=\"button\" onClick={() => setVisible(!visible)}>         {visible ? 'Hide' : 'Show'}       <\/button>       {visible && children}     <\/div>   ); } import Reveal from './Reveal';  Rhino.registerReactComponents({ Reveal }); rhino::build_js()"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"declaring-the-component","dir":"Articles > Tutorial","previous_headings":"","what":"Declaring the component","title":"Tutorial: Use React in Rhino","text":"Declaring component simply means creating function allow us use component R. Let’s create new react.R file app/view directory: name passed rhino::react_component() match name used call registerReactComponents() previous step.","code":"box::use(   rhino[react_component], )  #' @export Reveal <- react_component(\"Reveal\")"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"using-the-component","dir":"Articles > Tutorial","previous_headings":"","what":"Using the component","title":"Tutorial: Use React in Rhino","text":"Let’s use Reveal component wrap entire UI application. Edit app/main.R file like : Reveal function representing component. Named arguments passed component props, unnamed arguments become children. return value Reveal function shiny.tag object. can used UI definition application, rendered dynamically using either shiny::renderUI() shiny.react::renderReact(). object behaves much like vanilla Shiny components can freely mixed , example illustrates. can now run application see component action:","code":"box::use(   shiny[bootstrapPage, div, moduleServer, NS, renderUI, tags, uiOutput], ) box::use(   app/view/react[Reveal], # Import the component. )  #' @export ui <- function(id) {   ns <- NS(id)   bootstrapPage(     # Use the component.     Reveal(       # Named arguments become props.       id = ns(\"reveal\"),       # Unnamed arguments become children.       uiOutput(ns(\"message\"))     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$message <- renderUI({       div(         style = \"display: flex; justify-content: center; align-items: center; height: 100vh;\",         tags$h1(           tags$a(\"Check out Rhino docs!\", href = \"https://appsilon.github.io/rhino/\")         )       )     })   }) } shiny::runApp()"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"testing-the-component","dir":"Articles > Tutorial","previous_headings":"","what":"Testing the component","title":"Tutorial: Use React in Rhino","text":"bonus, let’s write Cypress end--end test check component works expected. Edit tests/cypress/e2e/app.cy.js file follows: code tells Cypress click button found element ID #app-reveal, verify contains Check Rhino docs! string. run test can use: can learn Cypress tests Tutorial: Write end--end tests Cypress.","code":"describe('app', () => {   beforeEach(() => {     cy.visit('/')   })    it('works with React components', () => {     cy.get('#app-reveal button').click();     cy.get('#app-reveal').contains('Check out Rhino docs!');   }) }) rhino::test_e2e()"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/use-react-in-rhino.html","id":"summary","dir":"Articles > Tutorial","previous_headings":"","what":"Summary","title":"Tutorial: Use React in Rhino","text":"tutorial know add React components Rhino application. get deeper understanding underlying mechanism, take look shiny.react tutorial.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"dependencies","dir":"Articles > Tutorial","previous_headings":"Setup","what":"Dependencies","title":"Tutorial: Write end-to-end tests with Cypress","text":"going , need install: rhino (surprised?) - install.packages(\"rhino\") Node.js - follow instructions Operating System","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-application","dir":"Articles > Tutorial","previous_headings":"Setup","what":"Test application","title":"Tutorial: Write end-to-end tests with Cypress","text":"First, need build simple Rhino application going serve playground tests. , create new project using either RStudio wizard rhino::init(\"EndToEndTests\") function. details, check Create initial application section basic Rhino tutorial. initial application, let’s add content can test. Create two modules - clicks.R message.R - app/view directory: Now, need add modules app/main.R: now run application, see something similar :  two functionalities going test: check message shown clicking button. check application counts button clicks correctly.","code":"# app/view/clicks.R  box::use(   shiny[actionButton, div, moduleServer, NS, renderText, textOutput], )  #' @export ui <- function(id) {   ns <- NS(id)   div(     class = \"clicks\",     actionButton(       ns(\"click\"),       \"Click me!\"     ),     textOutput(ns(\"counter\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$counter <- renderText(input$click)   }) } # app/view/message.R  box::use(   shiny[actionButton, div, moduleServer, NS, renderText, req, textOutput], )  #' @export ui <- function(id) {   ns <- NS(id)    div(     class = \"message\",     actionButton(       ns(\"show_message\"),       \"Show message\"     ),     textOutput(ns(\"message_text\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$message_text <- renderText({       req(input$show_message)        \"This is a message\"     })   }) } # app/main.R  box::use(   shiny[column, fluidPage, fluidRow, moduleServer, NS], )  box::use(   app/view/clicks,   app/view/message, )   #' @export ui <- function(id) {   ns <- NS(id)   fluidPage(     fluidRow(       column(         width = 6,         clicks$ui(ns(\"clicks\"))       ),       column(         width = 6,         message$ui(ns(\"message\"))       )     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     clicks$server(\"clicks\")     message$server(\"message\")   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"how-to-run-cypress-tests","dir":"Articles > Tutorial","previous_headings":"","what":"How to run Cypress tests?","title":"Tutorial: Write end-to-end tests with Cypress","text":"check project structure, find tests/cypress/ directory initial test tests/cypress/e2e/app.cy.js ready use. contains simple test just starts application. app can start, pass, matter crashes seconds later. Now, call rhino::test_e2e() test run, , since first time use one functionalities depend Node.js, needs install required libraries. Don’t worry, just one-time step done automatically. everything installed, see output test:  one thing worth noticing. End--end tests interactive mode, can see Cypress interacting application. use , simply run tests one additional argument: rhino::test_e2e(interactive = TRUE) Since just one simple test, much , soon change.","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-the-message-functionality","dir":"Articles > Tutorial","previous_headings":"","what":"Test the message functionality","title":"Tutorial: Write end-to-end tests with Cypress","text":"write first end--end test. goal check clicking button “Show message” label show message.","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-file-structure","dir":"Articles > Tutorial","previous_headings":"Test the message functionality","what":"Test file structure","title":"Tutorial: Write end-to-end tests with Cypress","text":"first thing create test file: tests/cypress/e2e/message.cy.js. Inside, provide structure description tests using describe : can see, going write two tests - first one check button exists second check works properly shows message. Now, let’s make sure beginning, Cypress open application. achieve , add beforeEach statement beginning: Now test () Cypress go application root URL. Note don’t need provide full address - already preconfigured don’t need worry .","code":"// tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   it(\"'Show message' button exists\", () => {    });    it(\"'Show message' button shows the message\", () => {    }); }); // tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"'Show message' button exists\", () => {    });    it(\"'Show message' button shows the message'\", () => {    }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-if-the-button-exists","dir":"Articles > Tutorial","previous_headings":"Test the message functionality","what":"Test if the button exists","title":"Tutorial: Write end-to-end tests with Cypress","text":"test going use two Cypress commands - get . first one look element using given CSS selector second check selected element expected property. First, need build CSS selector point Cypress correct button. can done using part browser Developer Tools, usually called (depending browser use) Inspector, Explorer, Elements. can learn Developer Tools available browser example article. Now, run application (shiny::runApp() R console button RStudio), open browser, right-click “Show message” button, select Inspect. Now able see HTML structure webpage button highlighted. view, can see can ask example button (HTML tag) inside element class message. Let’s pass selector Cypress get command: next step check button proper label: run tests (rhino::test_e2e()), see passes - button :","code":"// tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"'Show message' button exists\", () => {     cy.get(\".message button\");   });    it(\"'Show message' button shows the message'\", () => {    }); }); // tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"'Show message' button exists\", () => {     cy.get(\".message button\").should(\"have.text\", \"Show message\");   });    it(\"'Show message' button shows the message'\", () => {    }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-if-the-button-shows-the-message","dir":"Articles > Tutorial","previous_headings":"Test the message functionality","what":"Test if the button shows the message","title":"Tutorial: Write end-to-end tests with Cypress","text":"Ok, sure button exists, now ’s time click check outcome. Cypress comes command called click (expect ?!). Use second test click button: Now, just need check message proper content. button - look using CSS selector check contains expected text. time use id. check element browser (way button), see id message “app-message-message_text”. shows, Rhino, everything Shiny module, even outermost UI server part. “app” selector namespace identifies outer module. “message” namespace part added called message.R module “message_text” id textOutput. Ok, let’s use check message element correct text inside: Run tests see , passed:","code":"// tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"'Show message' button exists\", () => {     cy.get(\".message button\").should(\"have.text\", \"Show message\");   });    it(\"'Show message' button shows the message'\", () => {     cy.get(\".message button\").click();   }); }); // tests/cypress/e2e/message.cy.js  describe(\"Show message\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"'Show message' button exists\", () => {     cy.get(\".message button\").should(\"have.text\", \"Show message\");   });    it(\"'Show message' button shows the message'\", () => {     cy.get(\".message button\").click();     cy.get(\"#app-message-message_text\").should(\"have.text\", \"This is a message\");   }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-counting-clicks-functionality","dir":"Articles > Tutorial","previous_headings":"","what":"Test counting clicks functionality","title":"Tutorial: Write end-to-end tests with Cypress","text":"previously, need start creating file providing test structure. Create tests/cypress/e2e/clicks.cy.js fill skeleton similar first test file:","code":"// tests/cypress/e2e/clicks.cy.js  describe(\"Counting clicks\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"has a 'Click me!' button\", () => {    });    it(\"counts clicks\", () => {    }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-if-the-button-exists-1","dir":"Articles > Tutorial","previous_headings":"Test counting clicks functionality","what":"Test if the button exists","title":"Tutorial: Write end-to-end tests with Cypress","text":"First, want make sure button exists. follow example message module: Now, run tests, see new ones. pass.","code":"// tests/cypress/e2e/clicks.cy.js  describe(\"Counting clicks\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"has a 'Click me!' button\", () => {     cy.get(\".clicks button\").should(\"have.text\", \"Click me!\");   });    it(\"counts clicks\", () => {    }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"test-if-clicks-are-counted-correctly","dir":"Articles > Tutorial","previous_headings":"Test counting clicks functionality","what":"Test if clicks are counted correctly","title":"Tutorial: Write end-to-end tests with Cypress","text":"next step check clicking button affects counter shows correct value. , simulate 5 clicks check counter set 5. Since button clicked several times, use alias. , utilize another Cypress command: : Now, can access button using @button. let’s click 5 times: Finally, need check counter correct value (already know look id pass get command): Now, run tests. see something similar (might noticed now clicking test took time previously - ’s clicking finally happened):  run tests using interactive mode (rhino::test_e2e(interactive = TRUE)), able check click separate action!","code":"// tests/cypress/e2e/clicks.cy.js  describe(\"Counting clicks\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"has a 'Click me!' button\", () => {     cy.get(\".clicks button\").should(\"have.text\", \"Click me!\");   });    it(\"counts clicks\", () => {     cy.get(\".clicks button\").as(\"button\");   }); }); // tests/cypress/e2e/clicks.cy.js  describe(\"Counting clicks\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"has a 'Click me!' button\", () => {     cy.get(\".clicks button\").should(\"have.text\", \"Click me!\");   });    it(\"counts clicks\", () => {     cy.get(\".clicks button\").as(\"button\");      for (let i = 0; i < 5; i++) {       cy.get(\"@button\").click();     }   }); }); // tests/cypress/e2e/clicks.cy.js  describe(\"Counting clicks\", () => {   beforeEach(() => {     cy.visit(\"/\");   });    it(\"has a 'Click me!' button\", () => {     cy.get(\".clicks button\").should(\"have.text\", \"Click me!\");   });    it(\"counts clicks\", () => {     cy.get(\".clicks button\").as(\"button\");      for (let i = 0; i < 5; i++) {       cy.get(\"@button\").click();     }      cy.get(\"#app-clicks-counter\").should(\"have.text\", \"5\");   }); });"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"what-happens-when-the-app-changes","dir":"Articles > Tutorial","previous_headings":"","what":"What happens when the app changes?","title":"Tutorial: Write end-to-end tests with Cypress","text":"Let’s now think scenario, , development application new feature introduced. feature works fine, unfortunately, added unexpected changes features. simulate small modification app/view/clicks.R - add 1 counter: now run tests, see counting one failed:  way spotted (unexpected) change application behavior automated way. Without end--end tests, go unnoticed, since app still works - errors, just logic changed way didn’t want modified.","code":"# app/view/clicks.R  box::use(   shiny[actionButton, div, moduleServer, NS, renderText, textOutput], )  #' @export ui <- function(id) {   ns <- NS(id)   div(     class = \"clicks\",     actionButton(       ns(\"click\"),       \"Click me!\"     ),     textOutput(ns(\"counter\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$counter <- renderText(input$click + 1)   }) }"},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"continuous-integration","dir":"Articles > Tutorial","previous_headings":"","what":"Continuous Integration","title":"Tutorial: Write end-to-end tests with Cypress","text":"comes question: need run tests time make change? Fortunately, can automated! Rhino comes setup GitHub Actions run tests inform problem. can even block merging changes don’t pass automated checks. need get ? using GitHub - literally nothing! Rhino application comes GitHub Actions configuration (.github/workflows/rhino-test.yml) includes end--end tests!","code":""},{"path":"https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html","id":"summary","dir":"Articles > Tutorial","previous_headings":"","what":"Summary","title":"Tutorial: Write end-to-end tests with Cypress","text":"Adding end--end tests application can ensure quality help catch bugs early process development. Rhino comes powerful setup utilizes Cypress check behavior application. want use another solution: shinytest2? can without problems, shinytest2 works box Rhino applications! can learn . want learn differences Cypress shinytest2, check blogpost.","code":""},{"path":"https://appsilon.github.io/rhino/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kamil Żyła. Author, maintainer. Jakub Nowicki. Author. Leszek Siemiński. Author. Marek Rogala. Author. Recle Vibal. Author. Tymoteusz Makowski. Author. Rodrigo Basa. Author. Eduardo Almeida. Contributor. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/rhino/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Żyła K, Nowicki J, Siemiński L, Rogala M, Vibal R, Makowski T, Basa R (2024). rhino: Framework Enterprise Shiny Applications. R package version 1.7.0, https://github.com/Appsilon/rhino, https://appsilon.github.io/rhino/.","code":"@Manual{,   title = {rhino: A Framework for Enterprise Shiny Applications},   author = {Kamil Żyła and Jakub Nowicki and Leszek Siemiński and Marek Rogala and Recle Vibal and Tymoteusz Makowski and Rodrigo Basa},   year = {2024},   note = {R package version 1.7.0, https://github.com/Appsilon/rhino},   url = {https://appsilon.github.io/rhino/}, }"},{"path":"https://appsilon.github.io/rhino/index.html","id":"rhino-","dir":"","previous_headings":"","what":"A Framework for Enterprise Shiny Applications","title":"A Framework for Enterprise Shiny Applications","text":"Build high quality, enterprise-grade Shiny apps speed.","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/index.html","id":"upcoming","dir":"","previous_headings":"Events","what":"Upcoming","title":"A Framework for Enterprise Shiny Applications","text":"like learn Rhino hands-? Join events! Upcoming events added section - stay tuned. Open Source Spotlight: New developments Rhino 2024-02-27 18:00 (UTC+1) Shiny Gathering led Kamil Żyła","code":""},{"path":"https://appsilon.github.io/rhino/index.html","id":"past","dir":"","previous_headings":"Events","what":"Past","title":"A Framework for Enterprise Shiny Applications","text":"Best practices coding Shiny apps Rhino Team 2023-06-27 18:00 (UTC+2) Online gathering led Kamil Żyła Creating Shiny Apps Rhino: new framework Shiny apps 2022-05-13 18:00 (UTC+2) Online workshop led Kamil Żyła Introducing Rhino: Shiny application framework enterprise 2022-07-28 15:20 (UTC-4) Talk given Kamil Żyła rstudio::conf(2022) Enterprise-grade Shiny App Development {rhino} 2022-08-23 11:00 (UTC-4) Workshop led Jakub Nowicki R/Medicine 2022 Introducing Rhino: Shiny application framework enterprise 2022-09-07 11:30 (UTC+1) Talk given Jakub Nowicki EARL 2022 Rhino Workshop 2022-10-11 19:00 (UTC+2) Led Kamil Żyła LatinR 2022","code":""},{"path":"https://appsilon.github.io/rhino/index.html","id":"why-rhino","dir":"","previous_headings":"","what":"Why Rhino?","title":"A Framework for Enterprise Shiny Applications","text":"Rhino allows create Shiny apps Appsilon Way - like fullstack software engineer. Apply best software engineering practices, modularize code, test well, make UI beautiful, think user adoption beginning. Rhino opinionated framework focus software engineering practices development tools. Rhino supports work 3 main areas: Clear code: scalable app architecture, modularization based Box Shiny modules. Quality: unit tests, E2E tests Cypress, logging monitoring, linting. Automation: project startup, CI GitHub Actions, dependency management renv, configuration management config, Sass JavaScript bundling ES6 support via Node.js. features often implemented using well-known packages. Rhino brings working together box! Read : Rhino?","code":""},{"path":"https://appsilon.github.io/rhino/index.html","id":"share-feedback","dir":"","previous_headings":"","what":"Share feedback","title":"A Framework for Enterprise Shiny Applications","text":"Rhino user want share feedback shape future package? yes, happy hear anonymous developer survey! shouldn’t take 5 10 minutes fill definitely help us understand needs plan new features.","code":""},{"path":"https://appsilon.github.io/rhino/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework for Enterprise Shiny Applications","text":"Stable version: Development version:","code":"install.packages(\"rhino\") remotes::install_github(\"Appsilon/rhino\")"},{"path":"https://appsilon.github.io/rhino/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A Framework for Enterprise Shiny Applications","text":"Rhino documentation divided four sections, accessible navigation bar top: Tutorial: Start learn basics. Explanation: -depth articles Rhino machinery design. -Guides: Step--step instructions common tasks. Reference: list Rhino functions technical details. Check Rhino Showcase, example Shiny application built using Rhino. can also learn Rhino watching video one workshops: Creating Shiny Apps Rhino: new framework Shiny apps. repository step--step commits workshop application can found . Developed ❤️ Appsilon. Get touch: opensource@appsilon.com. Explore Rhinoverse - family R packages built around Rhino! Appsilon Posit (formerly RStudio) Full Service Certified Partner.","code":""},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":null,"dir":"Reference","previous_headings":"","what":"Rhino application — app","title":"Rhino application — app","text":"entrypoint Rhino application. app.R contain nothing call rhino::app().","code":""},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rhino application — app","text":"","code":"app()"},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rhino application — app","text":"object representing app (can passed shiny::runApp()).","code":""},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rhino application — app","text":"function wrapper around shiny::shinyApp(). reads rhino.yml performs configuration steps (logger, static files, box modules). can run Rhino application typical fashion using shiny::runApp(). Rhino load app/main.R file box module (box::use(app/main)). export two functions take single id argument - ui server top-level Shiny module.","code":""},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":"legacy-entrypoint","dir":"Reference","previous_headings":"","what":"Legacy entrypoint","title":"Rhino application — app","text":"possible specify different way load application using legacy_entrypoint option rhino.yml: app_dir: Rhino run app using shiny::shinyAppDir(\"app\"). source: Rhino source(\"app/main.R\"). file define top-level ui server objects passed shinyApp(). box_top_level: Rhino load app/main.R box module (default), exported ui server objects considered top-level. legacy_entrypoint setting useful migrating existing Shiny application Rhino. recommended transform application step step: app_dir able run application right away (just put files app directory). source setting application structure must brought closer Rhino, can still use library() source() functions. box_top_level can confident whole app properly modularized, box modules can load box modules (library() source() work). last step remove legacy_entrypoint setting completely. Compared box_top_level need make top-level ui server Shiny module (functions taking single id argument).","code":""},{"path":"https://appsilon.github.io/rhino/reference/app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rhino application — app","text":"","code":"if (FALSE) {   # Your `app.R` should contain nothing but this single call:   rhino::app() }"},{"path":"https://appsilon.github.io/rhino/reference/box_func_import_count_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"box library function import count linter — box_func_import_count_linter","title":"box library function import count linter — box_func_import_count_linter","text":"Checks function imports exceed defined max. See Explanation: Rhino style guide learn details.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_func_import_count_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"box library function import count linter — box_func_import_count_linter","text":"","code":"box_func_import_count_linter(max = 8L)"},{"path":"https://appsilon.github.io/rhino/reference/box_func_import_count_linter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"box library function import count linter — box_func_import_count_linter","text":"max Maximum function imports allowed [ ]. Defaults 8.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_func_import_count_linter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"box library function import count linter — box_func_import_count_linter","text":"custom linter function use r-lib/lintr.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_func_import_count_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"box library function import count linter — box_func_import_count_linter","text":"","code":"# will produce lints lintr::lint(   text = \"box::use(package[one, two, three, four, five, six, seven, eight, nine])\",   linters = box_func_import_count_linter() ) #> ::warning file=<text>,line=1,col=10::file=<text>,line=1,col=10,[box_func_import_count_linter] Limit the function imports to a max of 8.  lintr::lint(   text = \"box::use(package[one, two, three, four])\",   linters = box_func_import_count_linter(3) ) #> ::warning file=<text>,line=1,col=10::file=<text>,line=1,col=10,[box_func_import_count_linter] Limit the function imports to a max of 3.  # okay lintr::lint(   text = \"box::use(package[one, two, three, four, five])\",   linters = box_func_import_count_linter() )  lintr::lint(   text = \"box::use(package[one, two, three])\",   linters = box_func_import_count_linter(3) )"},{"path":"https://appsilon.github.io/rhino/reference/box_separate_calls_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"box library separate packages and module imports linter — box_separate_calls_linter","title":"box library separate packages and module imports linter — box_separate_calls_linter","text":"Checks packages modules imported separate box::use() statements. See Explanation: Rhino style guide learn details.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_separate_calls_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"box library separate packages and module imports linter — box_separate_calls_linter","text":"","code":"box_separate_calls_linter()"},{"path":"https://appsilon.github.io/rhino/reference/box_separate_calls_linter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"box library separate packages and module imports linter — box_separate_calls_linter","text":"custom linter function use r-lib/lintr","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_separate_calls_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"box library separate packages and module imports linter — box_separate_calls_linter","text":"","code":"# will produce lints lintr::lint(   text = \"box::use(package, path/to/file)\",   linters = box_separate_calls_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[box_separate_calls_linter] Separate packages and modules in their respective box::use() calls.  lintr::lint(   text = \"box::use(path/to/file, package)\",   linters = box_separate_calls_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[box_separate_calls_linter] Separate packages and modules in their respective box::use() calls.  # okay lintr::lint(   text = \"box::use(package1, package2)     box::use(path/to/file1, path/to/file2)\",   linters = box_separate_calls_linter() )"},{"path":"https://appsilon.github.io/rhino/reference/box_trailing_commas_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"box library trailing commas linter — box_trailing_commas_linter","title":"box library trailing commas linter — box_trailing_commas_linter","text":"Checks box:use imports trailing comma. applies package module imports ( ), , optionally, function imports [ ]. Take note lintr::commas_linter() may come play. See Explanation: Rhino style guide learn details.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_trailing_commas_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"box library trailing commas linter — box_trailing_commas_linter","text":"","code":"box_trailing_commas_linter(check_functions = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/box_trailing_commas_linter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"box library trailing commas linter — box_trailing_commas_linter","text":"check_functions Boolean flag include function imports [ ]. Defaults FALSE.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_trailing_commas_linter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"box library trailing commas linter — box_trailing_commas_linter","text":"custom linter function use r-lib/lintr","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_trailing_commas_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"box library trailing commas linter — box_trailing_commas_linter","text":"","code":"# will produce lints lintr::lint(   text = \"box::use(base, rlang)\",   linters = box_trailing_commas_linter() ) #> ::warning file=<text>,line=1,col=21::file=<text>,line=1,col=21,[box_trailing_commas_linter] Always have a trailing comma at the end of imports, before a `)`.  lintr::lint(   text = \"box::use(    dplyr[select, mutate]   )\",   linters = box_trailing_commas_linter() ) #> ::warning file=<text>,line=3,col=3::file=<text>,line=3,col=3,[box_trailing_commas_linter] Always have a trailing comma at the end of imports, before a `)`.  # okay lintr::lint(   text = \"box::use(base, rlang, )\",   linters = box_trailing_commas_linter() )  lintr::lint(   text = \"box::use(     dplyr[select, mutate],   )\",   linters = box_trailing_commas_linter() )"},{"path":"https://appsilon.github.io/rhino/reference/box_universal_import_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"box library universal import linter — box_universal_import_linter","title":"box library universal import linter — box_universal_import_linter","text":"Checks function imports explicit. package[...] used. See Explanation: Rhino style guide learn details.","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_universal_import_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"box library universal import linter — box_universal_import_linter","text":"","code":"box_universal_import_linter()"},{"path":"https://appsilon.github.io/rhino/reference/box_universal_import_linter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"box library universal import linter — box_universal_import_linter","text":"custom linter function use r-lib/lintr","code":""},{"path":"https://appsilon.github.io/rhino/reference/box_universal_import_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"box library universal import linter — box_universal_import_linter","text":"","code":"# will produce lints lintr::lint(   text = \"box::use(base[...])\",   linters = box_universal_import_linter() ) #> ::warning file=<text>,line=1,col=15::file=<text>,line=1,col=15,[box_universal_import_linter] Explicitly declare imports rather than universally import with `...`.  lintr::lint(   text = \"box::use(path/to/file[...])\",   linters = box_universal_import_linter() ) #> ::warning file=<text>,line=1,col=23::file=<text>,line=1,col=23,[box_universal_import_linter] Explicitly declare imports rather than universally import with `...`.  # okay lintr::lint(   text = \"box::use(base[print])\",   linters = box_universal_import_linter() )  lintr::lint(   text = \"box::use(path/to/file[do_something])\",   linters = box_universal_import_linter() )"},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Build JavaScript — build_js","title":"Build JavaScript — build_js","text":"Builds app/js/index.js file app/static/js/app.min.js. code transformed bundled using Babel webpack, latest JavaScript features can used (including ECMAScript 2015 aka ES6 newer standards). Requires Node.js available system.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build JavaScript — build_js","text":"","code":"build_js(watch = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build JavaScript — build_js","text":"watch Keep process running rebuilding JS whenever source files change.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build JavaScript — build_js","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build JavaScript — build_js","text":"Functions/objects defined global scope automatically become window properties, following JS code:   work expected used R like :   Instead explicitly export functions:   access via global App object:","code":"function sayHello() { alert('Hello!'); } tags$button(\"Hello!\", onclick = 'sayHello()'); export function sayHello() { alert('Hello!'); } tags$button(\"Hello!\", onclick = \"App.sayHello()\")"},{"path":"https://appsilon.github.io/rhino/reference/build_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build JavaScript — build_js","text":"","code":"if (interactive()) {   # Build the `app/js/index.js` file into `app/static/js/app.min.js`.   build_js() }"},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Sass — build_sass","title":"Build Sass — build_sass","text":"Builds app/styles/main.scss file app/static/css/app.min.css.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Sass — build_sass","text":"","code":"build_sass(watch = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Sass — build_sass","text":"watch Keep process running rebuilding Sass whenever source files change. supported sass: node configuration rhino.yml.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Sass — build_sass","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Sass — build_sass","text":"build method can configured using sass option rhino.yml: node: Use Dart Sass (requires Node.js available system). r: Use {sass} R package. recommended use Dart Sass primary, actively developed implementation Sass. systems without Node.js can use {sass} R package fallback. advised however, uses deprecated LibSass implementation.","code":""},{"path":"https://appsilon.github.io/rhino/reference/build_sass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Sass — build_sass","text":"","code":"if (interactive()) {   # Build the `app/styles/main.scss` file into `app/static/css/app.min.css`.   build_sass() }"},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage dependencies — dependencies","title":"Manage dependencies — dependencies","text":"Install, remove update R package dependencies Rhino project.","code":""},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage dependencies — dependencies","text":"","code":"pkg_install(packages)  pkg_remove(packages)"},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage dependencies — dependencies","text":"packages Character vector package names.","code":""},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage dependencies — dependencies","text":"None. functions called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage dependencies — dependencies","text":"Use pkg_install() install update package latest version. Use pkg_remove() remove package. functions install remove packages local {renv} library, update dependencies.R renv.lock files accordingly, one step. underlying {renv} functions can still called directly advanced use cases. See Explanation: Renv configuration learn details setup used Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/reference/dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage dependencies — dependencies","text":"","code":"if (FALSE) {   # Install dplyr   rhino::pkg_install(\"dplyr\")    # Update shiny to the latest version   rhino::pkg_install(\"shiny\")    # Install a specific version of shiny   rhino::pkg_install(\"shiny@1.6.0\")    # Install shiny.i18n package from GitHub   rhino::pkg_install(\"Appsilon/shiny.i18n\")    # Install Biobase package from Bioconductor   rhino::pkg_install(\"bioc::Biobase\")    # Install shiny from local source   rhino::pkg_install(\"~/path/to/shiny\")    # Remove dplyr   rhino::pkg_remove(\"dplyr\") }"},{"path":"https://appsilon.github.io/rhino/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Print diagnostics — diagnostics","title":"Print diagnostics — diagnostics","text":"Prints information can useful diagnosing issues Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print diagnostics — diagnostics","text":"","code":"diagnostics()"},{"path":"https://appsilon.github.io/rhino/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print diagnostics — diagnostics","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print diagnostics — diagnostics","text":"","code":"if (interactive()) {   # Print diagnostic information.   diagnostics() }"},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Format R — format_r","title":"Format R — format_r","text":"Uses {styler} package automatically format R sources.","code":""},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format R — format_r","text":"","code":"format_r(paths)"},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format R — format_r","text":"paths Character vector files directories format.","code":""},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format R — format_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format R — format_r","text":"code formatted according styler::tidyverse_style guide one adjustment: spacing around math operators modified avoid conflicts box::use() statements.","code":""},{"path":"https://appsilon.github.io/rhino/reference/format_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format R — format_r","text":"","code":"if (interactive()) {   # Format a single file.   format_r(\"app/main.R\")    # Format all files in a directory.   format_r(\"app/view\") }"},{"path":"https://appsilon.github.io/rhino/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rhino application — init","title":"Create Rhino application — init","text":"Generates file structure Rhino application. Can used start fresh project migrate existing Shiny application created without Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rhino application — init","text":"","code":"init(   dir = \".\",   github_actions_ci = TRUE,   rhino_version = \"rhino\",   force = FALSE )"},{"path":"https://appsilon.github.io/rhino/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rhino application — init","text":"dir Name directory create application . github_actions_ci GitHub Actions CI added? rhino_version using existing renv.lock file, Rhino install using renv::install(rhino_version). can provide argument use specific version / source, e.g.\"Appsilon/rhino@v0.4.0\". force Boolean; force initialization? default, Rhino refuse initialize project home directory.","code":""},{"path":"https://appsilon.github.io/rhino/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rhino application — init","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Rhino application — init","text":"recommended steps migrating existing Shiny application Rhino: Put app files app directory, can run shiny::shinyAppDir(\"app\") (assuming dependencies installed). list dependencies form library() calls, put dependencies.R file. file exist, Rhino generate based renv::dependencies(\"app\"). project uses {renv}, put renv.lock renv directory project root. Rhino try add necessary dependencies lockfile. Run rhino::init() project root.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint JavaScript — lint_js","title":"Lint JavaScript — lint_js","text":"Runs ESLint JavaScript sources app/js directory. Requires Node.js available system.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint JavaScript — lint_js","text":"","code":"lint_js(fix = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint JavaScript — lint_js","text":"fix Automatically fix problems.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint JavaScript — lint_js","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lint JavaScript — lint_js","text":"JS code uses global objects defined JS libraries R packages, need let linter know complain undefined objects. example, {leaflet} package defines global object L. access without raising linter errors, add /* global L */ comment JS code. need define Shiny $ global variables defined default. find particular ESLint error inapplicable code, can disable specific rule next line code comment like:   See ESLint documentation full details.","code":"// eslint-disable-next-line no-restricted-syntax"},{"path":"https://appsilon.github.io/rhino/reference/lint_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lint JavaScript — lint_js","text":"","code":"if (interactive()) {   # Lint the JavaScript sources in the `app/js` directory.   lint_js() }"},{"path":"https://appsilon.github.io/rhino/reference/lint_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint R — lint_r","title":"Lint R — lint_r","text":"Uses {lintr} package check R sources app tests/testthat directories style errors.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint R — lint_r","text":"","code":"lint_r(paths = NULL)"},{"path":"https://appsilon.github.io/rhino/reference/lint_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint R — lint_r","text":"paths Character vector directories files lint. NULL (default), check app tests/testthat directories.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint R — lint_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lint R — lint_r","text":"linter rules can adjusted .lintr file. can set maximum number accepted style errors legacy_max_lint_r_errors option rhino.yml. can useful inheriting legacy code multiple styling issues.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_sass.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint Sass — lint_sass","title":"Lint Sass — lint_sass","text":"Runs Stylelint Sass sources app/styles directory. Requires Node.js available system.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_sass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint Sass — lint_sass","text":"","code":"lint_sass(fix = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/lint_sass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint Sass — lint_sass","text":"fix Automatically fix problems.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_sass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint Sass — lint_sass","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/lint_sass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lint Sass — lint_sass","text":"","code":"if (interactive()) {   # Lint the Sass sources in the `app/styles` directory.   lint_sass() }"},{"path":"https://appsilon.github.io/rhino/reference/log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging functions — log","title":"Logging functions — log","text":"Convenient way log messages desired severity level.","code":""},{"path":"https://appsilon.github.io/rhino/reference/log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging functions — log","text":"","code":"log"},{"path":"https://appsilon.github.io/rhino/reference/log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Logging functions — log","text":"object class list length 7.","code":""},{"path":"https://appsilon.github.io/rhino/reference/log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logging functions — log","text":"log object list logging functions, order decreasing severity: fatal error warn success info debug trace Rhino configures logging based settings read config.yml file root project: rhino_log_level: minimum severity messages logged. rhino_log_file: file save logs . NA, standard error stream used. default config.yml file uses !expr Sys.getenv() log level file can also configured setting RHINO_LOG_LEVEL RHINO_LOG_FILE environment variables. functions re-exported log object aliases {logger} functions. can also import package use directly utilize full capabilities.","code":""},{"path":"https://appsilon.github.io/rhino/reference/log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logging functions — log","text":"","code":"if (FALSE) {   box::use(rhino[log])    # Messages can be formatted using glue syntax.   name <- \"Rhino\"   log$warn(\"Hello {name}!\")   log$info(\"{1:3} + {1:3} = {2 * (1:3)}\") }"},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":null,"dir":"Reference","previous_headings":"","what":"React components — react_component","title":"React components — react_component","text":"Declare React components defined app.","code":""},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"React components — react_component","text":"","code":"react_component(name)"},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"React components — react_component","text":"name name component.","code":""},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"React components — react_component","text":"function representing component.","code":""},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"React components — react_component","text":"three steps add React component Rhino application: Define component using JSX register Rhino.registerReactComponents(). Declare component R rhino::react_component(). Use component application. Please refer Tutorial: Use React Rhino learn details.","code":""},{"path":"https://appsilon.github.io/rhino/reference/react_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"React components — react_component","text":"","code":"# Declare the component. TextBox <- react_component(\"TextBox\")  # Use the component. ui <- TextBox(\"Hello!\", font_size = 20)"},{"path":"https://appsilon.github.io/rhino/reference/rhinos.html","id":null,"dir":"Reference","previous_headings":"","what":"Population of rhinos — rhinos","title":"Population of rhinos — rhinos","text":"dataset containing population 5 species rhinos.","code":""},{"path":"https://appsilon.github.io/rhino/reference/rhinos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population of rhinos — rhinos","text":"","code":"rhinos"},{"path":"https://appsilon.github.io/rhino/reference/rhinos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Population of rhinos — rhinos","text":"data frame 58 rows 3 variables: Year year Population rhinos population Species rhinos species","code":""},{"path":"https://appsilon.github.io/rhino/reference/rhinos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Population of rhinos — rhinos","text":"https://ourworldindata.org/","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Cypress end-to-end tests — test_e2e","title":"Run Cypress end-to-end tests — test_e2e","text":"Uses Cypress run end--end tests defined tests/cypress directory. Requires Node.js available system.","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Cypress end-to-end tests — test_e2e","text":"","code":"test_e2e(interactive = FALSE)"},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Cypress end-to-end tests — test_e2e","text":"interactive Cypress run interactive mode?","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Cypress end-to-end tests — test_e2e","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Cypress end-to-end tests — test_e2e","text":"Check : Tutorial: Write end--end tests Cypress learn write end--end tests Rhino app. want write end--end tests {shinytest2}, see -: Use shinytest2 guide.","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_e2e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Cypress end-to-end tests — test_e2e","text":"","code":"if (interactive()) {   # Run the end-to-end tests in the `tests/cypress` directory.   test_e2e() }"},{"path":"https://appsilon.github.io/rhino/reference/test_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R unit tests — test_r","title":"Run R unit tests — test_r","text":"Uses {testhat} package run unit tests tests/testthat directory.","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R unit tests — test_r","text":"","code":"test_r()"},{"path":"https://appsilon.github.io/rhino/reference/test_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run R unit tests — test_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/reference/test_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R unit tests — test_r","text":"","code":"if (interactive()) {   # Run all unit tests in the `tests/testthat` directory.   test_r() }"},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-170","dir":"Changelog","previous_headings":"","what":"rhino 1.7.0","title":"rhino 1.7.0","text":"CRAN release: 2024-02-22 box_universal_import_linter checks imports explicit. box_trailing_commas_linter checks statements include trailing commas. box_func_import_count_linter checks number function imports exceed limit. box_separate_calls_linter checks packages modules imported separate statements. request parameter now correctly forwarded UI function using legacy_entrypoint (#395). Force evaluation arguments higher-order functions avoid unexpected behavior due lazy evaluation (internal). Add support shiny.autoreload.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-160","dir":"Changelog","previous_headings":"","what":"rhino 1.6.0","title":"rhino 1.6.0","text":"CRAN release: 2024-01-24 pkg_install supports installation local sources, GitHub, Bioconductor. Improve Rhino CI (use latest versions make better use actions). test_e2e() now uses cypress 13.6 build_js() now uses webpack 5.89 build_sass() now uses sass 1.69 lint_js() now uses eslint 8.56 lint_sass() now uses stylelint 14.16 (last major version supporting stylistic rules) Upgrade remaining Node.js dependencies latest versions fix vulnerabilities. minimum supported Node.js version now 16. Introduce RHINO_NPM environment variable allow using npm alternatives like bun pnpm.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-150","dir":"Changelog","previous_headings":"","what":"rhino 1.5.0","title":"rhino 1.5.0","text":"CRAN release: 2023-09-06 Add Rstudio Addins lint, build test Sass, R JavaScript. Updated new module Addin. Fixes timeout Cypress E2E tests GitHub Actions. format_r longer adds spaces box imports. build_sass minifies CSS file also using R sass package.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-140","dir":"Changelog","previous_headings":"","what":"rhino 1.4.0","title":"rhino 1.4.0","text":"CRAN release: 2023-07-06 New pkg_install() pkg_remove() functions simplify dependency management Rhino. Add support using React Rhino (tutorial, JS function registerReactComponents(), R function react_component()). Require box v1.1.3 later (fixes issues lazy-loaded data trailing commas). Add E2E tests Rhino package (internal).","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-131","dir":"Changelog","previous_headings":"","what":"rhino 1.3.1","title":"rhino 1.3.1","text":"CRAN release: 2023-05-12 test_r() now clears environment loaded box modules tests run. removes need box::reload() calls tests. Added support shinymanager.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-130","dir":"Changelog","previous_headings":"","what":"rhino 1.3.0","title":"rhino 1.3.0","text":"CRAN release: 2022-12-22 Rhino now works shinytest2 box.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-121","dir":"Changelog","previous_headings":"","what":"rhino 1.2.1","title":"rhino 1.2.1","text":"CRAN release: 2022-11-30 Fix Rhino GitHub Actions (Cypress used fail).","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-120","dir":"Changelog","previous_headings":"","what":"rhino 1.2.0","title":"rhino 1.2.0","text":"CRAN release: 2022-11-27 Developer Mode longer needed. build_js() build_sass() functions now work watch = TRUE. lint_js() function now works imports used JavaScript. Drop dependency Yarn - Node.js now required. Run build_js() build_sass() CI. Use R version lockfile. Upgrade r-lib/actions/setup-r@v2. lint_r() now accepts paths argument can used run specific files. init() function refuse run home directory unless force = TRUE passed. Shiny bookmarking works better legacy_entrypoint: source (UI function longer needs take argument). Upgraded lintr >= 3.0.0 updated linter rules.","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-111","dir":"Changelog","previous_headings":"","what":"rhino 1.1.1","title":"rhino 1.1.1","text":"CRAN release: 2022-09-07 Minor release fix CRAN check failures (upgrade roxygen2 7.2.1 regenerate documentation).","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-110","dir":"Changelog","previous_headings":"","what":"rhino 1.1.0","title":"rhino 1.1.0","text":"CRAN release: 2022-07-12 New guide: “manage secrets environments” (#263). Sass-specific -rules now recognized rhino::lint_sass() (#289). Shiny bookmarking now works (#294). RStudio longer complains “many files” push-button deployment (#299). Issues server reloading development resolved (#297).","code":""},{"path":"https://appsilon.github.io/rhino/news/index.html","id":"rhino-100","dir":"Changelog","previous_headings":"","what":"rhino 1.0.0","title":"rhino 1.0.0","text":"CRAN release: 2022-04-19 First stable version.","code":""}]
