[{"path":"https://appsilon.github.io/rhino/v1.0.0/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing Guidelines","title":"Contributing Guidelines","text":"document contains guidelines specific Rhino. Appsilon’s general contributing guidelines still apply.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/CONTRIBUTING.html","id":"contributing-to-rhino","dir":"","previous_headings":"","what":"Contributing to Rhino","title":"Contributing Guidelines","text":"Pull requests Rhino welcome!","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/CONTRIBUTING.html","id":"development-process","dir":"","previous_headings":"","what":"Development Process","title":"Contributing Guidelines","text":"follow Scrum. changes introduced pull requests, must peer-reviewed. reviewer inspects code, tests changes checks DoD approving. develop branch base regular work. set “default” branch GitHub PRs automatically target closes keyword works issue descriptions. main branch used releases. regularly merge develop main, increment version number tag new release GitHub. follow Semantic Versioning scheme.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/CONTRIBUTING.html","id":"definition-of-done","dir":"","previous_headings":"","what":"Definition of Done","title":"Contributing Guidelines","text":"PR least 1 approval 0 change requests. CI passes (R CMD check, linter, unit tests). change thoroughly documented.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/application-structure.html","id":"philosophy","dir":"Articles > Explanation","previous_headings":"","what":"Philosophy","title":"Explanation: Application structure","text":"Shiny comes powerful reactive programming model rich set functions creating UI widgets custom HTML structure. features make possible quickly build impressive, interactive applications, can also make code harder test reuse. address , recommend separate code must depend Shiny logic can expressed without . division makes robust maintainable apps experience. support separation, Rhino encourages specific structure R sources application: main.R: entry point application. logic: Application code independent Shiny. view: Shiny modules related code.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/application-structure.html","id":"logic","dir":"Articles > Explanation","previous_headings":"Philosophy","what":"Logic","title":"Explanation: Application structure","text":"Code uses reactivity UI builder functions can hard test reuse. proper design possible express application logic using plain R functions data structures (like lists, data frames). Use logic directory code can expressed without Shiny.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/application-structure.html","id":"view","dir":"Articles > Explanation","previous_headings":"Philosophy","what":"View","title":"Explanation: Application structure","text":"view directory contain code describes user interface application. Use functions defined logic connect using reactivity. Structure application using Shiny modules. typical module can look something like :","code":"box::use(   shiny[moduleServer, NS, renderText, tagList, textInput, textOutput], ) box::use(   app/logic/messages[hello_message], )  #' @export ui <- function(id) {   ns <- NS(id)   tagList(     textInput(ns(\"name\"), \"Name\"),     textOutput(ns(\"message\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$message <- renderText(hello_message(input$name))   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/application-structure.html","id":"minimal-app-r","dir":"Articles > Explanation","previous_headings":"","what":"Minimal app.R","title":"Explanation: Application structure","text":"Rhino application comes minimal app.R: edit file instead write top-level code app/main.R. comment also important: thanks shinyApp string, RStudio recognizes file Shiny application shows “Run” “Publish” buttons. solution gives Rhino full control app startup. Steps performed rhino::app() include: Purge box cache, app can reloaded without restarting R session. Configure logger (log level, log file). Configure static files. Load main module / legacy entrypoint. Add head tags (favicon, CSS & JS). One can wonder really need separate main.R file. Couldn’t just define top-level ui server app.R pass rhino::app() arguments, much like shiny::shinyApp()? employ solution enforce consistent use box entire application. file loaded box::use() can load modules/packages box::use(). hand, Shiny simply sources app.R, library() source() used single file. entire Rhino application loaded box::use(app/main), sources must properly structured box modules.","code":"# Rhino / shinyApp entrypoint. Do not edit. rhino::app()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"rationale","dir":"Articles > Explanation","previous_headings":"","what":"Rationale","title":"Explanation: Box modules","text":"large applications critical maintainability properly structure code using files directories. R comes library() source() functions, functionality limited comes dividing code modules expressing dependencies. address , Rhino uses box R package, allows modularize code similar way languages like Python Java: Box modules force explicit dependencies files packages. graph dependencies visible glance app developed box, traditional approach (global.R, library(), source()) makes easy build app author understands. Introduction box existing apps written without helped improve code structure find bugs.","code":"box::use(   dplyr, # Import dplyr. Its functions can be used via `$`, e.g. `dplyr$filter`.   shiny[reactive], # Import the `reactive()` function from shiny package. ) box::use(   logic/data_validation, # Import the `logic/data_validation.R` module. )"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"features","dir":"Articles > Explanation","previous_headings":"","what":"Features","title":"Explanation: Box modules","text":"best place learn box official documentation. useful box features also explained sections .","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"init-files","dir":"Articles > Explanation","previous_headings":"Features","what":"Init files","title":"Explanation: Box modules","text":"Objects exported __init__.R file can imported parent directory.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"example","dir":"Articles > Explanation","previous_headings":"Features > Init files","what":"Example","title":"Explanation: Box modules","text":"Assume app/foo/__init__.R file following content: can now import bar defined app/foo.R: mechanism can used combination reexports make easier import multiple modules single directory.","code":"#' @export bar <- \"Hello!\" box::use(   app/foo[bar] )"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"reexports","dir":"Articles > Explanation","previous_headings":"Features","what":"Reexports","title":"Explanation: Box modules","text":"module can reexport objects imported different module applying #' @export box::use() statement.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"example-1","dir":"Articles > Explanation","previous_headings":"Features > Reexports","what":"Example","title":"Explanation: Box modules","text":"Assume modules analysis_tab.R download_tab.R app/view directory. can reexport app/view/__init__.R like : following box::use() statements now equivalent:","code":"#' @export box::use(   app/view/analysis_tab,   app/view/download_tab ) box::use(   app/view/analysis_tab,   app/view/download_tab, ) box::use(   app/view[analysis_tab, download_tab], )"},{"path":[]},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"lazy-loaded-data","dir":"Articles > Explanation","previous_headings":"Known issues","what":"Lazy-loaded data","title":"Explanation: Box modules","text":"Box 1.1.0 doesn’t support lazy-loaded data, e.g. box::use(datasets[mtcars]) won’t work. feature available next release (see issue). now please use datasets::mtcars code.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/box-modules.html","id":"trailing-commas","dir":"Articles > Explanation","previous_headings":"Known issues","what":"Trailing commas","title":"Explanation: Box modules","text":"Box 1.1.0 allows trailing commas box::use() statements code, can cause problems circumstances: Reexports (issue). Functions accessed via $ (issue). issues fixed nearest release.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/rhino-yml.html","id":"wrench-configure-rhino-with-rhino-yml","dir":"Articles > Explanation","previous_headings":"","what":":wrench: Configure Rhino with rhino.yml","title":"Explanation: Configuring Rhino - rhino.yml","text":"Rhino uses rhino.yml config file can set options works app. Currently available options described .","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/rhino-yml.html","id":"rhino-yml-options","dir":"Articles > Explanation","previous_headings":":wrench: Configure Rhino with rhino.yml","what":"rhino.yml options","title":"Explanation: Configuring Rhino - rhino.yml","text":"","code":"sass: string               # required | one of: \"node\", \"r\" legacy_entrypoint: string  # optional | one of: \"app_dir\", \"source\", \"box_top_level\""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/rhino-yml.html","id":"sass","dir":"Articles > Explanation","previous_headings":":wrench: Configure Rhino with rhino.yml > rhino.yml options","what":"sass","title":"Explanation: Configuring Rhino - rhino.yml","text":"Configures whether SASS build using R package Node package. latter provides newest implementation, cost additional system dependencies development (node yarn).","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/rhino-yml.html","id":"legacy_entrypoint","dir":"Articles > Explanation","previous_headings":":wrench: Configure Rhino with rhino.yml > rhino.yml options","what":"legacy_entrypoint","title":"Explanation: Configuring Rhino - rhino.yml","text":"setting useful migrating existing Shiny application Rhino. details see rhino::app() details section.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/similar-projects.html","id":"how-rhino-is-different-from","dir":"Articles > Explanation","previous_headings":"","what":"How Rhino is different from …?","title":"Explanation: Similar projects","text":"golem: Rhino apps R packages. Rhino puts emphasis development tools, clean configuration minimal boilerplate tries provide default solutions typical problems questions areas. leprechaun: Leprechaun works scaffolding Shiny apps, without adding dependencies. Rhino minimizes generated code aims provide complete foundation building Shiny apps ready deployment enterprise, can focus application’s logic user experience. devtools: devtools streamlines packages development. Rhino complete framework building Shiny apps. Rhino features interdependent (e.g. coverage unit tests) used without making app basic Rhino structure. usethis: usethis adds independent code snippers ask . Rhino complete framework building Shiny apps. app designed call Rhino functions instead insert code project.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/similar-projects.html","id":"what-do-you-think-about-golem-and-leprechaun","dir":"Articles > Explanation","previous_headings":"How Rhino is different from …?","what":"What do you think about Golem and Leprechaun?","title":"Explanation: Similar projects","text":"Golem great package, believe good fit many developers. However, just work us. Rhino attempt replace Golem - believe perfect use cases. may want try Rhino especially : need nested files structure handle bigger application. want follow complete set best practices. ’d like scalable, modularized application, separation responsibility, like follow suggested approach (box, Shiny modules, view / logic separation). want quickly start app set preconfigured development tools (linters, CI, Cypress, logging, Sass JS building). building application production use enterprise - need make sure ’s highly maintainable reliable long term.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/what-is-rhino.html","id":"what-is-rhino","dir":"Articles > Explanation","previous_headings":"","what":"What is Rhino?","title":"Explanation: What is Rhino?","text":"Rhino lets build high quality, enterprise-grade Shiny applications speed. opinionated framework focus best practices development tools. allows create Shiny apps “Appsilon Way” - like fullstack software engineer: apply best software engineering practices, modularize code, test well, make UI beautiful think adoption beginning. Rhino started series internal projects Appsilon aiming : Save time avoid repetitive tasks: include best practices care beginning project. Unify applications’ architecture: provide sensible defaults don’t reinvent wheel. Automate codify existing practices: pass knowledge form code instead documents manuals. since evolved R package now sharing Shiny community.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/what-is-rhino.html","id":"why-rhino","dir":"Articles > Explanation","previous_headings":"","what":"Why Rhino?","title":"Explanation: What is Rhino?","text":"Rhino? Rhino helps build Shiny apps faster, making reliable easier maintain. bundles coherent way set tools practices beneficial Shiny applications, especially enterprise. may want use Rhino : need nested files structure handle bigger application. want follow complete set solutions typical problems, avoid “reinventing wheel” ’d like scalable, modularized application, separation responsibility, like follow suggested approach (box, Shiny modules, view / logic separation). want save time avoid repetitive tasks: quickly start app set preconfigured development tools (linters, CI, Cypress, logging, Sass JS building) building application production use enterprise - need make sure ’s highly maintainable reliable long term.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/explanation/what-is-rhino.html","id":"why-not-use-golem-leprechaun","dir":"Articles > Explanation","previous_headings":"","what":"Why not use Golem, Leprechaun?","title":"Explanation: What is Rhino?","text":"Golem great package, believe good fit many developers. Choose whichever works best project! can learn differences Similar projects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"prepare-your-application-for-rhinoinit","dir":"Articles > How-to","previous_headings":"","what":"Prepare Your Application for rhino::init()","title":"How-to: Migrate app to Rhino","text":", able run application using shiny::shinyAppDir(\"app\").","code":". └── app     ├── utils     │   ├── bar.R     │   └── foo.R     ├── www     │   ├── main.css     │   └── main.js     ├── server.R     └── ui.R . ├── app │   ├── utils │   │   ├── bar.R │   │   └── foo.R │   ├── www │   │   ├── main.css │   │   └── main.js │   ├── server.R │   └── ui.R └── dependencies.R"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"what-if-my-app-uses-renv","dir":"Articles > How-to","previous_headings":"Prepare Your Application for rhino::init()","what":"What if: My App Uses renv","title":"How-to: Migrate app to Rhino","text":"used renv application, chances active renv session Rhino installed. address either deactivate renv run renv::install(\"rhino\"). Apart additional files related renv, target file structure different one presented .","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"initialize-your-rhino-application","dir":"Articles > How-to","previous_headings":"","what":"Initialize Your Rhino Application","title":"How-to: Migrate app to Rhino","text":"use renv , Rhino initialized . However, use renv, Rhino added necessary dependencies renv.lock file.","code":". ├── .github │   └── workflows │       └── rhino-test.yml ├── app │   ├── js │   │   └── index.js │   ├── logic │   │   └── __init__.R │   ├── static │   │   └── favicon.ico │   ├── styles │   │   └── main.scss │   ├── utils │   │   ├── bar.R │   │   └── foo.R │   ├── view │   │   └── __init__.R │   ├── www │   │   ├── main.css │   │   └── main.js │   ├── main.R │   ├── server.R │   └── ui.R ├── renv │   └── ... ├── tests │   ├── cypress │   │   ├── integration │   │   └── .gitignore │   ├── testthat │   │   └── test-main.R │   └── cypress.json ├── .Rprofile ├── .lintr ├── .renvignore ├── app.R ├── dependencies.R ├── old.Rprofile ├── renv.lock ├── rhino.yml └── app.Rproj"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"what-if-my-app-had--rprofile","dir":"Articles > How-to","previous_headings":"Initialize Your Rhino Application","what":"What if: My App Had .Rprofile","title":"How-to: Migrate app to Rhino","text":".Rprofile moved old.Rprofile. contained relevant bits (e.g. setting options), carry .Rprofile created Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"configure-your-rhino-application","dir":"Articles > How-to","previous_headings":"","what":"Configure Your Rhino Application","title":"How-to: Migrate app to Rhino","text":"last step get started Rhino configuring . minimal setup allows running application setting legacy_entrypoint rhino.yml. able run application immediately set legacy_entrypoint: app_dir, approach requires adjustments application’s structure. adjust adjust application fit best practices suggested Rhino, can modify legacy_entrypoint. Ultimately, application fully migrated Rhino, legacy_entrypoint setting can removed rhino.yml. Refer Next Steps section see continue improving application!","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"migrating-javascript-code","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Migrating JavaScript Code","title":"How-to: Migrate app to Rhino","text":"TODO: something along lines build_js() details","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"migrating-css-styles-to-sass","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Migrating CSS styles to SASS","title":"How-to: Migrate app to Rhino","text":"TODO","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"boxifying-application","dir":"Articles > How-to","previous_headings":"Next Steps","what":"Boxifying Application","title":"How-to: Migrate app to Rhino","text":"TODO: adjusting application fit structure proposed Rhino","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/how-to/migrate-app-to-rhino.html","id":"additional-notes","dir":"Articles > How-to","previous_headings":"","what":"Additional notes","title":"How-to: Migrate app to Rhino","text":"process described rhino::init() documentation, albeit great detail. first step put app files app directory, can run shinyAppDir(\"app\"). Practical experience migrating apps shows ’s useful step quickly lets verify whether app still works. process can bit unintuitive however. example, already app.R file ui/server/global R subdirectory, still move whole structure app. case ’ll end app.R, app/app.R ui/server/global app/R/. two app.R files might feel awkward. general use rhino::init() migration. done via RStudio GUI. already .Rprofile renv migrating, ’ll load won’t Rhino inside. need run rhino::init() different directory (perhaps run renv::deactivate()). Rhino renv::load() renv.lock. particular set options(\"repos\") based renv.lock. get “unsatisfied dependencies” migration?","code":""},{"path":[]},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"how-to-install-rhino","dir":"Articles > Tutorial","previous_headings":"Setup","what":"How to install Rhino?","title":"Tutorial: Create your first Rhino app","text":"get started, first thing need install Rhino :","code":"install.packages(\"rhino\")"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"dependencies","dir":"Articles > Tutorial","previous_headings":"Setup","what":"Dependencies","title":"Tutorial: Create your first Rhino app","text":"Development tools JavaScript Sass, provided Rhino, require Node.js yarn. Please follow installation guides OS: Node.js installation guide yarn installation guide Don’t discouraged able get Node.js yarn machine. Rhino still work (small limitations described JavaScript Sass sections). Note: already node installed machine, make sure using version >=12.0.0.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-initial-application","dir":"Articles > Tutorial","previous_headings":"","what":"Create an initial application","title":"Tutorial: Create your first Rhino app","text":"Creating new Rhino application can done two ways - running rhino::init() function using RStudio Create Project functionality.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-application-using-the-rstudio-wizard","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Create an application using the RStudio wizard","title":"Tutorial: Create your first Rhino app","text":"use RStudio, probably easiest way create new Rhino application simply use Create New Project feature. Rhino installed, automatically added one options RStudio: Choose , provide brand new project name ready go.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"create-an-application-using-rhinoinit","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Create an application using rhino::init()","title":"Tutorial: Create your first Rhino app","text":"Creating Rhino application possible R console running init function: two things need know choosing way initializing application: Rhino change working directory. need either open new R session new application directory manually change working directory. Rhino relies options added projects .Rprofile file. robust way make sure correctly sourced simply restart R session. result paths initial Rhino application following structure: want know , check document.","code":"rhino::init(\"RhinoApplication\") # In R console... setwd(\"./RhinoApplication\") . ├── app │   ├── js │   │   └── index.js │   ├── logic │   │   └── __init__.R │   ├── static │   │   └── favicon.ico │   ├── styles │   │   └── main.scss │   ├── view │   │   └── __init__.R │   └── main.R ├── tests │   ├── cypress │   │   └── integration │   │       └── app.spec.js │   ├── testthat │   │   └── test-main.R │   └── cypress.json ├── app.R ├── RhinoApplication.Rproj ├── dependencies.R ├── renv.lock └── rhino.yml"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"running-the-application","dir":"Articles > Tutorial","previous_headings":"Create an initial application","what":"Running the application","title":"Tutorial: Create your first Rhino app","text":"Now, set , let’s run : seeing right now:","code":"# In R console  shiny::shinyAppDir(\".\")"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-your-first-module","dir":"Articles > Tutorial","previous_headings":"","what":"Add your first module","title":"Tutorial: Create your first Rhino app","text":"application runs, seems quite empty. Let’s add something !","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"module-structure","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Module structure","title":"Tutorial: Create your first Rhino app","text":"Rhino, application view intended live Shiny module use encapsulation provided box package. Rhino already created good place new modules, app/view directory. Create file , named chart.R:","code":"# app/view/chart.R  box::use(   shiny[moduleServer, NS, h3] )  #' @export ui <- function(id) {   ns <- NS(id)    h3(\"Chart\") }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     print(\"Chart module server part works!\")   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"calling-a-module","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Calling a module","title":"Tutorial: Create your first Rhino app","text":"next step call new module application. First, need import main application file. , add another box::use section app/main.R file: Now, main module able use exported functions chart.R. Let’s try ! Modify app/main.R file look like : Now, run application, see message newly created module:","code":"# app/main.R  box::use(   app/view/chart )  ... # app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS], )  box::use(   app/view/chart )  #' @export ui <- function(id) {   ns <- NS(id)   bootstrapPage(     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     chart$server(\"chart\")   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"adding-components-to-a-module","dir":"Articles > Tutorial","previous_headings":"Add your first module","what":"Adding components to a module","title":"Tutorial: Create your first Rhino app","text":"Now time start adding something new module. can add “chart” module? ’re right, chart. Let’s add chart rhinoceros dataset available Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"adding-r-packages","dir":"Articles > Tutorial","previous_headings":"Add your first module > Adding components to a module","what":"Adding R packages","title":"Tutorial: Create your first Rhino app","text":"First, need install library visualizations - , go echarts4r. Rhino relies renv package dependency management. add package project, first, need install . using total 5 packages application. save us time tutorial install . Please note every new package add, need install, add dependencies.R, re-run renv::snapshot(). Note: Package htmlwidgets already installed since dependency shiny, still add dependencies.R file: second step add dependencies.R file. file single source truth comes R packages used application. renv going check dependencies file. Add library calls : Finally, need update renv.lock file: check renv.lock file, see updated echarts4r dependencies.","code":"# In R console renv::install(\"echarts4r\") renv::install(\"reactable\") renv::install(\"tidyr\") renv::install(\"dplyr\") renv::install(\"htmlwidgets\") # dependencies.R  # This file allows packrat (used by rsconnect during deployment) to pick up dependencies. library(rhino) library(echarts4r) library(reactable) library(tidyr) library(dplyr) library(htmlwidgets) # in R console renv::snapshot()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-dependencies-to-the-module","dir":"Articles > Tutorial","previous_headings":"Add your first module > Adding components to a module","what":"Add dependencies to the module","title":"Tutorial: Create your first Rhino app","text":"Now, packages available project environment, ’s time use . First, need import module. Extend box::use call app/view/chart.R file: can use packages module calling {package}${function}. options importing box check link. Add echarts4r render server part module output part UI: One thing worth noting UI part use another function Shiny - tagList. able , adjust import box::use - simply add tagList list imported functions. Finally, run application, see something similar :","code":"# app/view/chart.R  box::use(   shiny[moduleServer, NS, h3, tagList],   echarts4r, )  ... # app/view/chart.R  box::use(   shiny[moduleServer, NS, h3, tagList],   echarts4r, )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       # Datasets are the only case when you need to use :: in `box`.       # This issue should be solved in the next `box` release.       rhino::rhinos |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(Year) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-a-second-module","dir":"Articles > Tutorial","previous_headings":"","what":"Add a second module","title":"Tutorial: Create your first Rhino app","text":"content presented application, great add table show dataset. , let’s create another module - app/view/table.R:","code":"# app/view/table.R  box::use(   shiny[moduleServer, NS, h3, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\")   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {    }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"calling-the-second-module","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Calling the second module","title":"Tutorial: Create your first Rhino app","text":", need call new module main.R file:","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS], )  box::use(   app/view/chart,   app/view/table )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     table$ui(ns(\"table\")),     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     table$server(\"table\")     chart$server(\"chart\")   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"use-the-same-dataset-for-both-modules","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Use the same dataset for both modules","title":"Tutorial: Create your first Rhino app","text":"want use dataset modules, instead calling twice, let’s pass data argument:","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS] )  box::use(   app/view/table,   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     table$ui(ns(\"table\")),     chart$ui(ns(\"chart\"))   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     # Datasets are the only case when you need to use :: in `box`.     # This issue should be solved in the next `box` release.     data <- rhino::rhinos      table$server(\"table\", data = data)     chart$server(\"chart\", data = data)   }) } # app/view/table.R  box::use(   shiny[moduleServer, NS, h3, tagList], )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\")   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {    }) } # app/view/chart.R  box::use(   shiny[moduleServer, NS, h3, tagList],   echarts4r )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(Year) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"create-a-table","dir":"Articles > Tutorial","previous_headings":"Add a second module","what":"Create a table","title":"Tutorial: Create your first Rhino app","text":"table, go reactable package. Now can add table application. Let’s check raw data Rhinos: application look similar :","code":"# app/view/table.R  box::use(   shiny[moduleServer, NS, h3, tagList],   reactable, )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\"),     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       reactable$reactable(data)     )   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-logic","dir":"Articles > Tutorial","previous_headings":"","what":"Add logic","title":"Tutorial: Create your first Rhino app","text":"seems great slightly adjust table. Let’s transform dataset little bit. recommend placing code can expressed without Shiny app/logic directory. Let’s create file , called app/logic/data_transformation.R. table better Rhino species separate column, easy compare populations across time. , need transform dataset using pivot_wider function tidyr package. Now able access function data_transformation.R file using box::use(). Let’s also create function wraps pivot_wider transforms data. Note , always, need add @export able access file sourced. next step call function table module. Add box import transform dataset: run application, see something similar :  can notice, table arranged Black Rhino population. make sense change Year using dplyr::arrange. Next, add arrange transform_data function: result looks much understandable:  still one element can improved. check X-axis chart, values contain comma. ’s default behavior integers, year! fix , need add custom formatter. Let’s create another file, app/logic/chart_utils.R: Finally, add formatter chart module: now look better:","code":"# app/logic/data_transformation.R  box::use(   tidyr[pivot_wider] )  #' @export transform_data <- function(data) {   pivot_wider(     data = data,     names_from = Species,     values_from = Population   ) } # app/view/table.R  box::use(   shiny[moduleServer, NS, h3, tagList],   reactable, )  box::use(   app/logic/data_transformation[transform_data] )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Table\"),     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       data |>         transform_data() |>         reactable$reactable()     )   }) } # app/logic/data_transformation.R  box::use(   tidyr[pivot_wider],   dplyr[arrange] )  #' @export transform_data <- function(data) {   pivot_wider(     data = data,     names_from = Species,     values_from = Population   ) |>     arrange(Year) } # app/logic/chart_utils.R  box::use(   htmlwidgets[JS] )  #' @export label_formatter <- JS(   \"function(value, index){     return value;   }\" ) # app/view/chart.R  box::use(   shiny[moduleServer, NS, h3, tagList],   echarts4r )  box::use(   app/logic/chart_utils[label_formatter] )  #' @export ui <- function(id) {   ns <- NS(id)    tagList(     h3(\"Chart\"),     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(           Year,           axisLabel = list(             formatter = label_formatter           )         ) |>         echarts4r$e_tooltip()     )   }) }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-custom-styles","dir":"Articles > Tutorial","previous_headings":"","what":"Add custom styles","title":"Tutorial: Create your first Rhino app","text":"Note: Sass builder uses Node.js. able install Node environment, can change sass entry rhino.yml file r. now use R package Sass bundling. hood, uses deprecated C++ library, Node solution strongly recommended . stage, application working components, look well. Adjusting application style can done providing custom styles app/styles directory, first, need adjust application little bit adding Html tags CSS classes: Now ready modify styles. Simply add CSS rules app/styles/mains.scss file: try running application right now, see changes. Rhino uses minified app/static/app.min.css styling. use , need build using Rhino function: Now, running application see something similar :  worth noting, don’t need add app/static/app.min.css application header - Rhino . Let’s adjust application little bit adding title: styling: Finally, build Sass : result look similar :","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS, div], )  box::use(   app/view/table,   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     )   ) }  #' @export server <- function(id) {   moduleServer(id, function(input, output, session) {     # Datasets are the only case when you need to use :: in `box`.     # This issue should be solved in the next `box` release.     data <- rhino::rhinos      table$server(\"table\", data = data)     chart$server(\"chart\", data = data)   }) } # app/view/chart.R  box::use(   shiny[moduleServer, NS, div],   echarts4r )  box::use(   app/logic/chart_utils[label_formatter] )  #' @export ui <- function(id) {   ns <- NS(id)    div(     class = \"component-box\",     echarts4r$echarts4rOutput(ns(\"chart\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$chart <- echarts4r$renderEcharts4r(       data |>         echarts4r$group_by(Species) |>         echarts4r$e_chart(x = Year) |>         echarts4r$e_line(Population) |>         echarts4r$e_x_axis(           Year,           axisLabel = list(             formatter = label_formatter           )         ) |>         echarts4r$e_tooltip()     )   }) } # app/view/table.R  box::use(   shiny[moduleServer, NS, div],   reactable, )  box::use(   app/logic/data_transformation[transform_data] )  #' @export ui <- function(id) {   ns <- NS(id)    div(     class = \"component-box\",     reactable$reactableOutput(ns(\"table\"))   ) }  #' @export server <- function(id, data) {   moduleServer(id, function(input, output, session) {     output$table <- reactable$renderReactable(       data |>         transform_data() |>         reactable$reactable()     )   }) } // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } } # in R console rhino::build_sass() # app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS, div, h1], )  box::use(   app/view/table,   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     )   ) }  ... // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } }  h1 {   text-align: center;   font-weight: 900; } # in R console rhino::build_sass()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/articles/tutorial/create-your-first-rhino-app.html","id":"add-javascript-code","dir":"Articles > Tutorial","previous_headings":"","what":"Add JavaScript code","title":"Tutorial: Create your first Rhino app","text":"Note: Rhino tools JS require Node.js. can still use JavaScript code like regular Shiny application, instead using www directory, add files static/js call using full path, e.g. tags$script(src = \"static/js/app.min.js\"). last element, let’s add button trigger JavaScript popup. First, need create simple button style : Remember rebuild Sass rhino::build_sass()! now see button question mark top right corner application:  Now, ’s time writing JavaScript code show popup message. JS code stored app/js directory. already first (empty) file - index.js. Let’s use : function simply show browser alert message. familiar JavaScript code used Shiny applications, notice one difference - keyword export added function name. Rhino, functions marked like available Shiny use. styles, Rhino application use JS files directly, instead utilizes minified version build rhino::build_js function. Try : Now app/static/js/app.min.js file created , minified CSS file, automatically included application head tag. last thing use showHelp() function application. , let’s simply add onclick button: probably noticed second difference classic Shiny approach one used Rhino. exported JS functions now available App (JavaScript function library, e.g. Math.round). Now, run application click button, see something like :  Congratulations! now fully armed operational battle station Rhino application!","code":"# app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS, div, h1, tags, icon], )  box::use(   app/view/table,   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     ),     tags$button(       id = \"help-button\",       icon(\"question\")     )   ) }  ... // app/styles/main.scss  .components-container {   display: inline-grid;   grid-template-columns: 1fr 1fr;   width: 100%;    .component-box {     padding: 10px;     margin: 10px;     box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);   } }  h1 {   text-align: center;   font-weight: 900; }  #help-button {   position: fixed;   top: 0;   right: 0;   margin: 10px; } // app/js/index.js  export function showHelp() {   alert(\"Check rhino here: https://appsilon.github.io/rhino/\"); } # in R console rhino::build_js() # app/main.R  box::use(   shiny[bootstrapPage, moduleServer, NS, div, h1, tags, icon], )  box::use(   app/view/table,   app/view/chart, )  #' @export ui <- function(id) {   ns <- NS(id)    bootstrapPage(     h1(\"RhinoApplication\"),     div(       class = \"components-container\",       table$ui(ns(\"table\")),       chart$ui(ns(\"chart\"))     ),     tags$button(       id = \"help-button\",       icon(\"question\"),       onclick = \"App.showHelp()\"     )   ) }  ..."},{"path":"https://appsilon.github.io/rhino/v1.0.0/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kamil Zyla. Author, maintainer. Jakub Nowicki. Author. Tymoteusz Makowski. Author. Marek Rogala. Author. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zyla K, Nowicki J, Makowski T, Rogala M (2024). rhino: Framework Enterprise Shiny Applications. R package version 1.0.0, https://github.com/Appsilon/rhino, https://appsilon.github.io/rhino/.","code":"@Manual{,   title = {rhino: A Framework for Enterprise Shiny Applications},   author = {Kamil Zyla and Jakub Nowicki and Tymoteusz Makowski and Marek Rogala},   year = {2024},   note = {R package version 1.0.0, https://github.com/Appsilon/rhino},   url = {https://appsilon.github.io/rhino/}, }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/index.html","id":"rhino-","dir":"","previous_headings":"","what":"A Framework for Enterprise Shiny Applications","title":"A Framework for Enterprise Shiny Applications","text":"Build high quality, enterprise-grade Shiny apps speed.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/index.html","id":"why-rhino","dir":"","previous_headings":"","what":"Why Rhino?","title":"A Framework for Enterprise Shiny Applications","text":"Rhino allows create Shiny apps Appsilon Way - like fullstack software engineer. Apply best software engineering practices, modularize code, test well, make UI beautiful, think user adoption beginning. Rhino opinionated framework focus software engineering practices development tools. Rhino supports work 3 main areas: Clear code: scalable app architecture, modularization based Box Shiny modules. Quality: unit tests, E2E tests Cypress, logging monitoring, linting. Automation: project startup, CI GitHub Actions, dependency management renv, configuration management config, Sass JavaScript bundling ES6 support via Node.js. features often implemented using well-known packages. Rhino brings working together box! Read : Rhino? Similar projects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/index.html","id":"get-it","dir":"","previous_headings":"","what":"Get it","title":"A Framework for Enterprise Shiny Applications","text":"Stable version: Development version:","code":"install.packages(\"rhino\") remotes::install_github(\"Appsilon/rhino\")"},{"path":"https://appsilon.github.io/rhino/v1.0.0/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Framework for Enterprise Shiny Applications","text":"Create new Rhino application rhino::init() learn , follow Rhino tutorial migrate existing application Rhino, refer rhino::init() details section","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"A Framework for Enterprise Shiny Applications","text":"Rhino distributed LGPL-3.0 license. Developed ❤️ Appsilon. Appsilon Full Service Certified RStudio Partner. Learn appsilon.com. Get touch: opensource@appsilon.com.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":null,"dir":"Reference","previous_headings":"","what":"Rhino application — app","title":"Rhino application — app","text":"entrypoint Rhino application. app.R contain nothing call rhino::app().","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rhino application — app","text":"","code":"app()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rhino application — app","text":"object representing app (can passed shiny::runApp()).","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rhino application — app","text":"function wrapper around shiny::shinyApp(). reads rhino.yml performs configuration steps (logger, static files, box modules). can run Rhino application typical fashion using shiny::runApp(). Rhino load app/main.R file box module (box::use(app/main)). export two functions take single id argument - ui server top-level Shiny module.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":"legacy-entrypoint","dir":"Reference","previous_headings":"","what":"Legacy entrypoint","title":"Rhino application — app","text":"possible specify different way load application using legacy_entrypoint option rhino.yml: app_dir: Rhino run app using shiny::shinyAppDir(\"app\"). source: Rhino source(\"app/main.R\"). file define top-level ui server objects passed shinyApp(). box_top_level: Rhino load app/main.R box module (default), exported ui server objects considered top-level. legacy_entrypoint setting useful migrating existing Shiny application Rhino. recommended transform application step step: app_dir able run application right away (just put files app directory). source setting application structure must brought closer Rhino, can still use library() source() functions. box_top_level can confident whole app properly modularized, box modules can load box modules (library() source() work). last step remove legacy_entrypoint setting completely. Compared box_top_level need make top-level ui server Shiny module (functions taking single id argument).","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rhino application — app","text":"","code":"if (FALSE) { # \\dontrun{   # Your `app.R` should contain nothing but this single call:   rhino::app() } # }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Build JavaScript — build_js","title":"Build JavaScript — build_js","text":"Builds app/js/index.js file app/static/js/app.min.js. code transformed bundled using Babel webpack, latest JavaScript features can used (including ECMAScript 2015 aka ES6 newer standards). Requires Node.js yarn command available system.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build JavaScript — build_js","text":"","code":"build_js(watch = FALSE)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build JavaScript — build_js","text":"watch Keep process running rebuilding JS whenever source files change.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build JavaScript — build_js","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build JavaScript — build_js","text":"Functions/objects defined global scope automatically become window properties, following JS code:  work expected used R like :  Instead explicitly export functions:  access via global App object:","code":"function sayHello() { alert('Hello!'); } tags$button(\"Hello!\", onclick = 'sayHello()'); export function sayHello() { alert('Hello!'); } tags$button(\"Hello!\", onclick = \"App.sayHello()\")"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build JavaScript — build_js","text":"","code":"if (interactive()) {   # Build the `app/js/index.js` file into `app/static/js/app.min.js`.   build_js() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Sass — build_sass","title":"Build Sass — build_sass","text":"Builds app/styles/main.scss file app/static/css/app.min.css.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Sass — build_sass","text":"","code":"build_sass(watch = FALSE)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Sass — build_sass","text":"watch Keep process running rebuilding Sass whenever source files change. supported sass: node configuration rhino.yml.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Sass — build_sass","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Sass — build_sass","text":"build method can configured using sass option rhino.yml: node: Use Dart Sass (requires Node.js yarn command available system). r: Use {sass} R package. recommended use Dart Sass primary, actively developed implementation Sass. systems without yarn can use {sass} R package fallback. advised however, uses deprecated LibSass implementation.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/build_sass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Sass — build_sass","text":"","code":"if (interactive()) {   # Build the `app/styles/main.scss` file into `app/static/css/app.min.css`.   build_sass() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Print diagnostics — diagnostics","title":"Print diagnostics — diagnostics","text":"Prints information can useful diagnosing issues Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print diagnostics — diagnostics","text":"","code":"diagnostics()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print diagnostics — diagnostics","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print diagnostics — diagnostics","text":"","code":"if (interactive()) {   # Print diagnostic information.   diagnostics() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Format R — format_r","title":"Format R — format_r","text":"Uses {styler} package automatically format R sources.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format R — format_r","text":"","code":"format_r(paths)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format R — format_r","text":"paths Character vector files directories format.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format R — format_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format R — format_r","text":"code formatted according styler::tidyverse_style guide one adjustment: spacing around math operators modified avoid conflicts box::use() statements.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/format_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format R — format_r","text":"","code":"if (interactive()) {   # Format a single file.   format_r(\"app/main.R\")    # Format all files in a directory.   format_r(\"app/view\") }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rhino application — init","title":"Create Rhino application — init","text":"Generates file structure Rhino application. Can used start fresh project migrate existing Shiny application created without Rhino.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rhino application — init","text":"","code":"init(dir = \".\", github_actions_ci = TRUE, rhino_version = \"rhino\")"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rhino application — init","text":"dir Name directory create application . github_actions_ci GitHub Actions CI added? rhino_version using existing renv.lock file, Rhino install using renv::install(rhino_version). can provide argument use specific version / source, e.g.\"Appsilon/rhino@v0.4.0\".","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rhino application — init","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Rhino application — init","text":"recommended steps migrating existing Shiny application Rhino: Put app files app directory, can run shiny::shinyAppDir(\"app\") (assuming dependencies installed). list dependencies form library() calls, put dependencies.R file. file exist, Rhino generate based renv::dependencies(\"app\"). project uses {renv}, put renv.lock renv directory project root. Rhino try add necessary dependencies lockfile. Run rhino::init() project root.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint JavaScript — lint_js","title":"Lint JavaScript — lint_js","text":"Runs ESLint JavaScript sources app/js directory. Requires Node.js yarn command available system.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint JavaScript — lint_js","text":"","code":"lint_js(fix = FALSE)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint JavaScript — lint_js","text":"fix Automatically fix problems.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint JavaScript — lint_js","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lint JavaScript — lint_js","text":"JS code uses global objects defined JS libraries R packages, need let linter know complain undefined objects. example, {leaflet} package defines global object L. access without raising linter errors, add /* global L */ comment JS code. need define Shiny $ global variables defined default. find particular ESLint error inapplicable code, can disable specific rule next line code comment like:  See ESLint documentation full details.","code":"// eslint-disable-next-line no-restricted-syntax"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lint JavaScript — lint_js","text":"","code":"if (interactive()) {   # Lint the JavaScript sources in the `app/js` directory.   lint_js() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint R — lint_r","title":"Lint R — lint_r","text":"Uses {lintr} package check R sources app tests/testthat directories style errors.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint R — lint_r","text":"","code":"lint_r()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint R — lint_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lint R — lint_r","text":"linter rules can adjusted .lintr file. can set maximum number accepted style errors legacy_max_lint_r_errors option rhino.yml. can useful inheriting legacy code multiple styling issues.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_sass.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint Sass — lint_sass","title":"Lint Sass — lint_sass","text":"Runs Stylelint Sass sources app/styles directory. Requires Node.js yarn command available system.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_sass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint Sass — lint_sass","text":"","code":"lint_sass(fix = FALSE)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_sass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint Sass — lint_sass","text":"fix Automatically fix problems.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_sass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lint Sass — lint_sass","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/lint_sass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lint Sass — lint_sass","text":"","code":"if (interactive()) {   # Lint the Sass sources in the `app/styles` directory.   lint_sass() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging functions — log","title":"Logging functions — log","text":"Convenient way log messages desired severity level.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging functions — log","text":"","code":"log"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Logging functions — log","text":"object class list length 7.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logging functions — log","text":"log object list logging functions, order decreasing severity: fatal error warn success info debug trace Rhino configures logging based settings read config.yml file root project: rhino_log_level: minimum severity messages logged. rhino_log_file: file save logs . NA, standard error stream used. default config.yml file uses !expr Sys.getenv() log level file can also configured setting RHINO_LOG_LEVEL RHINO_LOG_FILE environment variables. functions re-exported log object aliases {logger} functions. can also import package use directly utilize full capabilities.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logging functions — log","text":"","code":"if (FALSE) { # \\dontrun{   box::use(rhino[log])    # Messages can be formatted using glue syntax.   name <- \"Rhino\"   log$warn(\"Hello {name}!\")   log$info(\"{1:3} + {1:3} = {2 * (1:3)}\") } # }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/rhinos.html","id":null,"dir":"Reference","previous_headings":"","what":"Population of rhinos — rhinos","title":"Population of rhinos — rhinos","text":"dataset containing population 5 species rhinos.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/rhinos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population of rhinos — rhinos","text":"","code":"rhinos"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/rhinos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Population of rhinos — rhinos","text":"data frame 58 rows 3 variables: Year year Population rhinos population Species rhinos species","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/rhinos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Population of rhinos — rhinos","text":"https://ourworldindata.org/","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_e2e.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Cypress end-to-end tests — test_e2e","title":"Run Cypress end-to-end tests — test_e2e","text":"Uses Cypress run end--end tests defined tests/cypress directory. Requires Node.js yarn command available system.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_e2e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Cypress end-to-end tests — test_e2e","text":"","code":"test_e2e(interactive = FALSE)"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_e2e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Cypress end-to-end tests — test_e2e","text":"interactive Cypress run interactive mode?","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_e2e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Cypress end-to-end tests — test_e2e","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_e2e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Cypress end-to-end tests — test_e2e","text":"","code":"if (interactive()) {   # Run the end-to-end tests in the `tests/cypress` directory.   test_e2e() }"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R unit tests — test_r","title":"Run R unit tests — test_r","text":"Uses {testhat} package run unit tests tests/testthat directory.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R unit tests — test_r","text":"","code":"test_r()"},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run R unit tests — test_r","text":"None. function called side effects.","code":""},{"path":"https://appsilon.github.io/rhino/v1.0.0/reference/test_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R unit tests — test_r","text":"","code":"if (interactive()) {   # Run all unit tests in the `tests/testthat` directory.   test_r() }"}]
